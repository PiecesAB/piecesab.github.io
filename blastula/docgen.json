{"date": "3/21/2024 6:06:04 AM", "namespaces": {"Blastula": {"classes": {"Blastodisc": {"comment": "    /// <summary>\n    /// Fires bullet structures!\n    /// </summary>\n    ", "declarations": [{"id": "enabled", "kind": "field", "mainType": "bool", "defaultValue": "true", "comment": "\r\n        ", "methodParams": {}}, {"id": "mainSchedule", "kind": "field", "mainType": "BaseSchedule", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "bulletsExecutable", "kind": "field", "mainType": "bool", "defaultValue": "true", "comment": "        ", "methodParams": {}}, {"id": "cleanupSchedule", "kind": "field", "mainType": "BaseSchedule", "defaultValue": "", "comment": "        /// <summary>\n        /// This schedule runs when the Blastodisc is about to be deleted. Be careful if the schedule is a child,\n        /// because it could be deleted, and waiting would not work.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "deleteAction", "kind": "field", "mainType": "DeleteAction", "defaultValue": "DeleteAction.BulletsRemain", "comment": "        ", "methodParams": {}}, {"id": "speedMultiplier", "kind": "field", "mainType": "float", "defaultValue": "1f", "comment": "        ", "methodParams": {}}, {"id": "customData", "kind": "property", "mainType": "Dictionary<string, Variant>", "defaultValue": "new Dictionary<string, Variant>()", "comment": "\n        ", "methodParams": {}}, {"id": "all", "kind": "field", "mainType": "HashSet<Blastodisc>", "defaultValue": "new HashSet<Blastodisc>()", "comment": "\r\n        ", "methodParams": {}}, {"id": "primordial", "kind": "field", "mainType": "Blastodisc", "defaultValue": "null", "comment": "        /// <summary>\r\n        /// This must be the first blastodisc that exists, and is within the kernel.\r\n        /// It exists so that when a blastodisc is deleted, there is still a way to handle its bullets.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "specialNames", "kind": "property", "mainType": "HashSet<string>", "defaultValue": "new HashSet<string>()\r\n        {\r\n            \"t\", \"shot_count\"\r\n        }", "comment": "\n        ", "methodParams": {}}, {"id": "GetSpecial", "kind": "method", "mainType": "Variant", "defaultValue": "", "comment": "\n        ", "methodParams": {"varName": {"paramType": "string", "defaultValue": "", "comment": ""}}}, {"id": "Shoot", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"operation": {"paramType": "BaseOperation", "defaultValue": "", "comment": ""}}}, {"id": "Inherit", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        /// <summary>\r\n        /// Makes the BNode a child of the Blastodisc's master structure.\r\n        /// </summary>\n\t\t", "methodParams": {"bNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "ClearBullets", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        /// <summary>\r\n        /// Deletes all bullets associated with this Blastodisc.\r\n        /// </summary>\n        ", "methodParams": {"deletionEffect": {"paramType": "bool", "defaultValue": "true", "comment": ""}}}, {"id": "ClearBulletsForAll", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "ExecuteAll", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}]}, "MoreMath": {"comment": "    ", "declarations": [{"id": "RDMod", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "        /// <summary>\n        /// Performs a % n where a / n is rounded down.\n        /// </summary>\n        ", "methodParams": {"a": {"paramType": "int", "defaultValue": "", "comment": ""}, "n": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "RDMod", "kind": "method", "mainType": "float", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Performs a % n where a / n is rounded down.\n        /// </summary>\n        ", "methodParams": {"a": {"paramType": "float", "defaultValue": "", "comment": ""}, "n": {"paramType": "float", "defaultValue": "", "comment": ""}}}, {"id": "Log", "kind": "method", "mainType": "float", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Performs a logarithm with base b. Godot has DegToRad but not this?\n        /// </summary>\n        ", "methodParams": {"x": {"paramType": "float", "defaultValue": "", "comment": ""}, "b": {"paramType": "float", "defaultValue": "", "comment": ""}}}, {"id": "GCD", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Greatest common denominator.\n        /// </summary>\n        ", "methodParams": {"a": {"paramType": "int", "defaultValue": "", "comment": ""}, "b": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "LCM", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Least common multiple.\n        /// </summary>\n        ", "methodParams": {"a": {"paramType": "int", "defaultValue": "", "comment": ""}, "b": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "FastInvNorm", "kind": "method", "mainType": "float", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Returns an approximate inverse normal function; two-tailed.\n        /// How many standard deviations away from the mean would the left and right sides need to be\n        /// to contain (x * 100)% of the area?\n        /// </summary>\n        ", "methodParams": {"x": {"paramType": "float", "defaultValue": "", "comment": ""}}}, {"id": "MoveTowardsAngle", "kind": "method", "mainType": "float", "defaultValue": "", "comment": "\n        ", "methodParams": {"current": {"paramType": "float", "defaultValue": "", "comment": ""}, "goal": {"paramType": "float", "defaultValue": "", "comment": ""}, "maxDelta": {"paramType": "float", "defaultValue": "", "comment": ""}}}, {"id": "Slerp", "kind": "method", "mainType": "Transform2D", "defaultValue": "", "comment": "\n        ", "methodParams": {"from": {"paramType": "Transform2D", "defaultValue": "", "comment": ""}, "to": {"paramType": "Transform2D", "defaultValue": "", "comment": ""}, "t": {"paramType": "float", "defaultValue": "", "comment": ""}}}, {"id": "Lerp", "kind": "method", "mainType": "Transform2D", "defaultValue": "", "comment": "\n        ", "methodParams": {"from": {"paramType": "Transform2D", "defaultValue": "", "comment": ""}, "to": {"paramType": "Transform2D", "defaultValue": "", "comment": ""}, "t": {"paramType": "float", "defaultValue": "", "comment": ""}}}]}, "RNG": {"comment": "    /// <summary>\n    /// We obviously don't want true randomness in patterns and collectibles for a bullet game - that would ruin replays!\n    /// But we also don't want the same game every time.\n    /// Be sure to reseed and save the seed value at the beginning of every stage!\n    /// </summary>\n    ", "declarations": [{"id": "Reseed", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"seed": {"paramType": "uint", "defaultValue": "", "comment": ""}}}, {"id": "Int", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        ", "methodParams": {"min": {"paramType": "int", "defaultValue": "", "comment": ""}, "max": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "GetFloat", "kind": "method", "mainType": "float", "defaultValue": "", "comment": "\n            ", "methodParams": {}}, {"id": "GetDouble", "kind": "method", "mainType": "double", "defaultValue": "", "comment": "\n            ", "methodParams": {}}, {"id": "Sign", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "Single", "kind": "method", "mainType": "float", "defaultValue": "", "comment": "\n        ", "methodParams": {"min": {"paramType": "float", "defaultValue": "0f", "comment": ""}, "max": {"paramType": "float", "defaultValue": "1f", "comment": ""}}}, {"id": "Double", "kind": "method", "mainType": "double", "defaultValue": "", "comment": "\n        ", "methodParams": {"min": {"paramType": "double", "defaultValue": "0f", "comment": ""}, "max": {"paramType": "double", "defaultValue": "1f", "comment": ""}}}, {"id": "UnitCircle", "kind": "method", "mainType": "Vector2", "defaultValue": "", "comment": "\n        // Returns a random point in/on a circle, distributed by area.\n        ", "methodParams": {"surfaceOnly": {"paramType": "bool", "defaultValue": "false", "comment": ""}}}, {"id": "UnitSphere", "kind": "method", "mainType": "Vector3", "defaultValue": "", "comment": "\n        // Returns a random point in/on a sphere, distributed by volume.\n        ", "methodParams": {"surfaceOnly": {"paramType": "bool", "defaultValue": "false", "comment": ""}}}, {"id": "NormalDist", "kind": "method", "mainType": "float", "defaultValue": "", "comment": "\n        // Normally distributed random variable.\n        // This could be useful for natural-looking decay and/or item effects.\n        ", "methodParams": {"mean": {"paramType": "float", "defaultValue": "", "comment": ""}, "sd": {"paramType": "float", "defaultValue": "", "comment": ""}, "min": {"paramType": "float", "defaultValue": "float.NegativeInfinity", "comment": ""}, "max": {"paramType": "float", "defaultValue": "float.PositiveInfinity", "comment": ""}}}, {"id": "Color", "kind": "method", "mainType": "Color", "defaultValue": "", "comment": "\n        ", "methodParams": {"opacitySet": {"paramType": "float", "defaultValue": "1", "comment": ""}}}]}, "UtilityFunctions": {"comment": "    ", "declarations": [{"id": "PathBuilder", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        /// <summary>\r\n        /// This is used to convert a node hierarchy into string IDs.<br />\r\n        /// It performs Act function with the node and its new ID, where registering can be handled.<br />\r\n        /// <br />\r\n        /// NodeA                   ID: NodeA<br />\r\n        /// - NodeR                 ID: NodeA/NodeR<br />\r\n        /// - NodeS                 ID: NodeA/NodeS<br />\r\n        /// --- NodeX               ID: NodeA/NodeS/NodeX<br />\r\n        /// --- NodeY               ID: NodeA/NodeS/NodeY<br />\r\n        /// - NodeT                 ID: NodeA/NodeT<br />\r\n        /// --- NodeZ               ID: NodeA/NodeT/NodeZ<br />\r\n        /// - # Holder<br />\r\n        /// --- NodeU               ID: NodeA/NodeU<br />\r\n        /// <br />\r\n        /// If we ignoreRoot, all these IDs would have \"NodeA/\" omitted, and NodeA itself wouldn't be registered.\r\n        /// </summary>\n        ", "methodParams": {"root": {"paramType": "Node", "defaultValue": "", "comment": ""}, "Act": {"paramType": "Action<Node, string>", "defaultValue": "", "comment": ""}, "ignoreRoot": {"paramType": "bool", "defaultValue": "false", "comment": ""}}}]}, "ExpressionSolver": {"comment": "    /// <summary>\r\n    /// Godot already has a powerful expression parser! What luck. But we still need to define some variables.\r\n    /// This class manages variables in order to use expressions in bullet operations.\r\n    /// </summary>\r\n    ", "declarations": [{"id": "currentLocalContainer", "kind": "field", "mainType": "IVariableContainer", "defaultValue": "", "comment": "\r\n        /// <summary>\r\n        /// This is the current blastodisc, if it exists. Used to resolve local variables.\r\n        /// </summary>\r\n        ", "methodParams": {}}, {"id": "nodeToVars", "kind": "field", "mainType": "Dictionary<ulong, NodeInfo>", "defaultValue": "new Dictionary<ulong, NodeInfo>()", "comment": "\r\n        /// <summary>\r\n        /// Turns instance IDs of Nodes (not BNodes) into their information.\r\n        /// That way we're ready to solve them when the formula is executed.\r\n        /// </summary>\r\n        ", "methodParams": {}}, {"id": "PopulateNames", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"vars": {"paramType": "List<string>", "defaultValue": "", "comment": ""}, "s": {"paramType": "string", "defaultValue": "", "comment": ""}}}, {"id": "ResolveVariable", "kind": "method", "mainType": "Variant", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"varName": {"paramType": "string", "defaultValue": "", "comment": ""}}}, {"id": "ResolveVariables", "kind": "method", "mainType": "Godot.Collections.Array", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"vars": {"paramType": "List<string>", "defaultValue": "", "comment": ""}}}, {"id": "Solve", "kind": "method", "mainType": "Variant", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"node": {"paramType": "Node", "defaultValue": "", "comment": ""}, "varName": {"paramType": "string", "defaultValue": "", "comment": ""}, "varValue": {"paramType": "string", "defaultValue": "", "comment": ""}, "solveStatus": {"paramType": "SolveStatus", "defaultValue": "", "comment": ""}, "errorValue": {"paramType": "Variant", "defaultValue": "default", "comment": ""}}}, {"id": "Unsolve", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"node": {"paramType": "Node", "defaultValue": "", "comment": ""}, "varName": {"paramType": "string", "defaultValue": "", "comment": ""}}}, {"id": "ClearNode", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"node": {"paramType": "Node", "defaultValue": "", "comment": ""}}}]}, "ExpressionSolver+VarInfo": {"comment": "        ", "declarations": [{"id": "expr", "kind": "field", "mainType": "Expression", "defaultValue": "new Expression()", "comment": "            /// <summary>\r\n            /// For stored parsing and execution.\r\n            /// </summary>\r\n            ", "methodParams": {}}, {"id": "parseSuccess", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "            ", "methodParams": {}}, {"id": "vars", "kind": "field", "mainType": "List<string>", "defaultValue": "new List<string>()", "comment": "            /// <summary>\r\n            /// The variables in the expression, which we need to solve.\r\n            /// </summary>\r\n            ", "methodParams": {}}, {"id": "constantResult", "kind": "field", "mainType": "Variant", "defaultValue": "default", "comment": "            /// <summary>\r\n            /// If the result is constant, store it here.\r\n            /// </summary>\r\n            ", "methodParams": {}}]}, "ExpressionSolver+NodeInfo": {"comment": "\r\n        ", "declarations": [{"id": "exprs", "kind": "field", "mainType": "Dictionary<string, VarInfo>", "defaultValue": "new Dictionary<string, VarInfo>()", "comment": "            /// <summary>\r\n            /// Key is the name of the variable in Godot.\r\n            /// </summary>\r\n            ", "methodParams": {}}]}, "Waiters": {"comment": "    ", "declarations": [{"id": "sceneLoadCounter", "kind": "property", "mainType": "long", "defaultValue": "0", "comment": "        ", "methodParams": {}}, {"id": "IncrementSceneLoadCounter", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "WaitOneFrame", "kind": "method", "mainType": "Task", "defaultValue": "", "comment": "\n        ", "methodParams": {"dispatcher": {"paramType": "Node", "defaultValue": "", "comment": ""}, "ignorePause": {"paramType": "bool", "defaultValue": "false", "comment": ""}}}, {"id": "WaitFrames", "kind": "method", "mainType": "Task", "defaultValue": "", "comment": "\n        ", "methodParams": {"dispatcher": {"paramType": "Node", "defaultValue": "", "comment": ""}, "frames": {"paramType": "int", "defaultValue": "", "comment": ""}, "ignorePause": {"paramType": "bool", "defaultValue": "false", "comment": ""}}}, {"id": "WaitSeconds", "kind": "method", "mainType": "Task", "defaultValue": "", "comment": "\n        ", "methodParams": {"dispatcher": {"paramType": "Node", "defaultValue": "", "comment": ""}, "seconds": {"paramType": "float", "defaultValue": "", "comment": ""}, "ignorePause": {"paramType": "bool", "defaultValue": "false", "comment": ""}}}, {"id": "WaitUntil", "kind": "method", "mainType": "Task", "defaultValue": "", "comment": "\n        ", "methodParams": {"dispatcher": {"paramType": "Node", "defaultValue": "", "comment": ""}, "Condition": {"paramType": "Func<bool>", "defaultValue": "", "comment": ""}}}, {"id": "DelayedQueueFree", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"toDelete": {"paramType": "Node", "defaultValue": "", "comment": ""}, "waitTime": {"paramType": "float", "defaultValue": "", "comment": ""}, "units": {"paramType": "Wait.TimeUnits", "defaultValue": "", "comment": ""}}}, {"id": "WaitUntilBoxedBool", "kind": "method", "mainType": "Task", "defaultValue": "", "comment": "\n        ", "methodParams": {"dispatcher": {"paramType": "Node", "defaultValue": "", "comment": ""}, "b": {"paramType": "BoxedBool", "defaultValue": "", "comment": ""}}}]}, "Waiters+BoxedBool": {"comment": "\n        ", "declarations": [{"id": "b", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "            ", "methodParams": {}}]}, "FrameCounter": {"comment": "    ", "declarations": [{"id": "realGameFrame", "kind": "property", "mainType": "ulong", "defaultValue": "", "comment": "        /// <summary>\n        /// Number of real frames since the program began, regardless of pausing.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "stageFrame", "kind": "property", "mainType": "ulong", "defaultValue": "", "comment": "        /// <summary>\n        /// Number of unpaused frames since the stage began.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "realSessionFrame", "kind": "property", "mainType": "ulong", "defaultValue": "", "comment": "        /// <summary>\n        /// Number of frames since the session began, regardless of pausing.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "ResetStageFrame", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "ResetSessionFrame", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "Elapsed", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\r\n        // True if at least \"count\" frames passed since \"startFrame\"\r\n        ", "methodParams": {"startFrame": {"paramType": "ulong", "defaultValue": "", "comment": ""}, "frameCount": {"paramType": "ulong", "defaultValue": "", "comment": ""}}}, {"id": "GetStageTime", "kind": "method", "mainType": "double", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}]}, "FrameCounter+Buffer": {"comment": "\n        ", "declarations": [{"id": "startFrame", "kind": "property", "mainType": "ulong", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "length", "kind": "property", "mainType": "ulong", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "Elapsed", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\r\n            ", "methodParams": {}}, {"id": "FramesRemaining", "kind": "method", "mainType": "ulong", "defaultValue": "", "comment": "\r\n            ", "methodParams": {}}, {"id": "BecameElapsedThisFrame", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\r\n            ", "methodParams": {}}, {"id": "WillBecomeElapsedNextFrame", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\r\n            ", "methodParams": {}}, {"id": "Replenish", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n            /// <summary>\n            /// Restarts the buffer to this frame.\n            /// </summary>\n            ", "methodParams": {}}, {"id": "Replenish", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n            /// <summary>\n            /// Restarts the buffer to this frame, and sets the number of frames until it elapses.\n            /// </summary>\n            ", "methodParams": {"newLength": {"paramType": "ulong", "defaultValue": "", "comment": ""}}}, {"id": "Deplete", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n            /// <summary>\n            /// Immediately makes the buffer elapsed.\n            /// </summary>\n            ", "methodParams": {}}, {"id": "SetLength", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n            ", "methodParams": {"newLength": {"paramType": "ulong", "defaultValue": "", "comment": ""}}}]}, "FrameCounter+Cache": {"comment": "\r\n        // Stores results from the current frame, to avoid recalculating.\r\n        ", "declarations": [{"id": "data", "kind": "property", "mainType": "T", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "IsValid", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\r\n            ", "methodParams": {}}, {"id": "Invalidate", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n            ", "methodParams": {}}, {"id": "Update", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n            ", "methodParams": {"newData": {"paramType": "T", "defaultValue": "", "comment": ""}}}]}, "FrameCounter+DictCache": {"comment": "\r\n        // Stores results from the current frame, to avoid recalculating.\r\n        ", "declarations": [{"id": "IsValid", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\r\n            ", "methodParams": {"key": {"paramType": "K", "defaultValue": "", "comment": ""}}}, {"id": "Update", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n            ", "methodParams": {"key": {"paramType": "K", "defaultValue": "", "comment": ""}, "newData": {"paramType": "V", "defaultValue": "", "comment": ""}}}, {"id": "Get", "kind": "method", "mainType": "V", "defaultValue": "", "comment": "\r\n            ", "methodParams": {"key": {"paramType": "K", "defaultValue": "", "comment": ""}}}]}, "BNodeFunctions": {"comment": "\n    ", "declarations": [{"id": "masterQueue", "kind": "field", "mainType": "BNode*", "defaultValue": "null", "comment": "        ", "methodParams": {}}, {"id": "mqHead", "kind": "field", "mainType": "int", "defaultValue": "0", "comment": "        /// <summary>\n        /// This should always be the earliest uninitialized BNode in the master queue.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "mqTail", "kind": "field", "mainType": "int", "defaultValue": "0", "comment": "        /// <summary>\n        /// This should always be the earliest initialized BNode in the master queue, or the head for an empty queue.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "mqSize", "kind": "const", "mainType": "int", "defaultValue": "262144", "comment": "        /// <summary>\n        /// If mqSize is a power of 2, modulus is a bitmask; counting on the compiler to help. <br />\n        /// Also, we can only store one less than this, lest mqHead == mqTail when full.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "multithreadCutoff", "kind": "const", "mainType": "int", "defaultValue": "256", "comment": "        /// <summary>\n        /// If the bullet's tree is larger than this, we use multithreading for certain operations.<br />\n        /// We don't always multithread because Parallel.For has scheduling overhead.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "starterBNode", "kind": "field", "mainType": "BNode*", "defaultValue": "null", "comment": "\n        ", "methodParams": {}}, {"id": "MasterQueueCount", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "MasterQueueRemainingCapacity", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "MasterQueuePopOne", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Allocates the next available BNode, if possible.\n        /// </summary>\n        /// <returns>The index to that BNode in masterQueue</returns>\n        ", "methodParams": {}}, {"id": "MasterQueuePopN", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Allocates n available BNodes, if possible.\n        /// </summary>\n        /// <returns>The index to the first such BNode in masterQueue.</returns>\n        ", "methodParams": {"n": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "MasterQueuePushOne", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        // Warning: this doesn't subtract from treeSize or treeDepth of the parent. That would make deletion take longer.\n        // Please adjust it externally.\n        ", "methodParams": {"i": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "MasterQueuePushTree", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        ", "methodParams": {"i": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "InitializeQueue", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        // We except this to take up tens of megabytes of memory\n        ", "methodParams": {}}, {"id": "CloneOne", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        // A clean-up function has been deemed unnecessary.\n        // It would have run at the end of the game, but memory is cleaned by the OS anyway.\n\n        ", "methodParams": {"i": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "CloneN", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        ", "methodParams": {"i": {"paramType": "int", "defaultValue": "", "comment": ""}, "n": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "SetTransform2D", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"i": {"paramType": "int", "defaultValue": "", "comment": ""}, "transform": {"paramType": "Transform2D", "defaultValue": "", "comment": ""}}}, {"id": "SetColliderInfo", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"i": {"paramType": "int", "defaultValue": "", "comment": ""}, "bulletLayer": {"paramType": "int", "defaultValue": "", "comment": ""}, "canSleep": {"paramType": "bool", "defaultValue": "", "comment": ""}}}, {"id": "Rotate", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"i": {"paramType": "int", "defaultValue": "", "comment": ""}, "radians": {"paramType": "float", "defaultValue": "", "comment": ""}}}, {"id": "MakeSpaceForChildren", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"i": {"paramType": "int", "defaultValue": "", "comment": ""}, "howMany": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "RecalculateTreeDepth", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Recalculates this BNode's depth and all of its parents' depths too.<br />\n        /// We're lazy and only recalculate when necessary!\n        /// </summary>\n        ", "methodParams": {"i": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "SetChild", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        /// <param name=\"i\">BNode index in masterQueue.</param>\n        /// <param name=\"ci\">Position to modify within the children list</param>\n        /// <param name=\"ti\">BNode index of target new child in masterQueue</param>\n        /// <returns>The possible index of the old child (in case you want to destroy it)</returns>\n        ", "methodParams": {"i": {"paramType": "int", "defaultValue": "", "comment": ""}, "ci": {"paramType": "int", "defaultValue": "", "comment": ""}, "ti": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "DeleteAllChildren", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"i": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "AddBehavior", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"i": {"paramType": "int", "defaultValue": "", "comment": ""}, "order": {"paramType": "BehaviorOrder", "defaultValue": "", "comment": ""}}}, {"id": "Execute", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Performs all behaviors of masterQueue[i] recursively.\n        /// </summary>\n        ", "methodParams": {"i": {"paramType": "int", "defaultValue": "", "comment": ""}, "stepSize": {"paramType": "float", "defaultValue": "", "comment": ""}}}]}, "ExecuteManager": {"comment": "    ", "declarations": [{"id": "debugTimer", "kind": "field", "mainType": "Stopwatch", "defaultValue": "", "comment": "        ", "methodParams": {}}]}, "PostExecuteManager": {"comment": "    ", "declarations": [{"id": "debugTimer", "kind": "field", "mainType": "Stopwatch", "defaultValue": "", "comment": "        ", "methodParams": {}}]}, "PostExecute": {"comment": "    /// <summary>\n    /// There exist operations we want to do on the main thread after Execute.\n    /// This class handles the scheduling and performing of such operations.\n    /// </summary>\n    ", "declarations": [{"id": "bNodeIndex", "kind": "field", "mainType": "int", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "useDeletionEffect", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "bNodeIndex", "kind": "field", "mainType": "int", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "operationID", "kind": "field", "mainType": "long", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "Initialize", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        /// <summary>\n        /// No need to delete pointers, this class exists for the whole game, whether you like it or not.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "ScheduleDeletion", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "        /// <summary>\n        /// This will delete the BNode the next time PerformScheduled runs.\n        /// Because this is called from Execute, we make sure multithreading doesn't fray our list.\n        /// </summary>\n        ", "methodParams": {"bNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}, "useDeletionEffect": {"paramType": "bool", "defaultValue": "", "comment": ""}}}, {"id": "ScheduleOperation", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"bNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}, "opID": {"paramType": "long", "defaultValue": "", "comment": ""}}}, {"id": "PerformScheduled", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Only run on the main thread.\n        /// </summary>\n        ", "methodParams": {}}]}, "Boundary": {"comment": "    ", "declarations": [{"id": "ID", "kind": "field", "mainType": "string", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}, {"id": "form", "kind": "field", "mainType": "Form", "defaultValue": "Form.Rectangle", "comment": "        ", "methodParams": {}}, {"id": "defaultSize", "kind": "field", "mainType": "Vector2", "defaultValue": "new Vector2(500, 500)", "comment": "        ", "methodParams": {}}, {"id": "inheritSize", "kind": "field", "mainType": "Control", "defaultValue": "null", "comment": "        ", "methodParams": {}}, {"id": "updates", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        ", "methodParams": {}}, {"id": "moveToGlobalPosition", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        ", "methodParams": {}}, {"id": "colorInEditor", "kind": "field", "mainType": "Color", "defaultValue": "Colors.White", "comment": "        ", "methodParams": {}}, {"id": "boundaryFromID", "kind": "field", "mainType": "Dictionary<string, Boundary>", "defaultValue": "new Dictionary<string, Boundary>()", "comment": "\r\n        ", "methodParams": {}}, {"id": "form", "kind": "field", "mainType": "Form", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "center", "kind": "field", "mainType": "Vector2", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "size", "kind": "field", "mainType": "Vector2", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "extent", "kind": "field", "mainType": "Vector2", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "lowLevelInfo", "kind": "field", "mainType": "LowLevelInfo*", "defaultValue": "null", "comment": "\r\n        // We can pass it to bullet behaviors.\r\n        ", "methodParams": {}}, {"id": "IsWithin", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"boundInfo": {"paramType": "LowLevelInfo*", "defaultValue": "", "comment": ""}, "globalPos": {"paramType": "Vector2", "defaultValue": "", "comment": ""}, "shrink": {"paramType": "float", "defaultValue": "", "comment": ""}}}, {"id": "Clamp", "kind": "method", "mainType": "Vector2", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"boundInfo": {"paramType": "LowLevelInfo*", "defaultValue": "", "comment": ""}, "globalPos": {"paramType": "Vector2", "defaultValue": "", "comment": ""}, "shrink": {"paramType": "float", "defaultValue": "", "comment": ""}}}, {"id": "Wrap", "kind": "method", "mainType": "Vector2", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"boundInfo": {"paramType": "LowLevelInfo*", "defaultValue": "", "comment": ""}, "globalPos": {"paramType": "Vector2", "defaultValue": "", "comment": ""}, "shrink": {"paramType": "float", "defaultValue": "", "comment": ""}}}, {"id": "globalPosition", "kind": "field", "mainType": "Vector2", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "rotation", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "Reflect", "kind": "method", "mainType": "ReflectData", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"boundInfo": {"paramType": "LowLevelInfo*", "defaultValue": "", "comment": ""}, "rdIn": {"paramType": "ReflectData", "defaultValue": "", "comment": ""}, "shrink": {"paramType": "float", "defaultValue": "", "comment": ""}, "reflectPerpendicular": {"paramType": "bool", "defaultValue": "", "comment": ""}}}]}, "MainBoundary": {"comment": "    /// <summary>\n    /// A boundary for the game's main screen(s).\n    /// </summary>\n    ", "declarations": [{"id": "mode", "kind": "field", "mainType": "MainType", "defaultValue": "MainType.Single", "comment": "\r\n        ", "methodParams": {}}, {"id": "boundPerMode", "kind": "field", "mainType": "MainBoundary[]", "defaultValue": "new MainBoundary[(int)MainType.Count]", "comment": "\r\n        ", "methodParams": {}}, {"id": "mainLowLevelInfos", "kind": "field", "mainType": "Boundary.LowLevelInfo**", "defaultValue": "null", "comment": "        ", "methodParams": {}}, {"id": "IsOnScreen", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\r\n        /// <summary>\r\n        /// Returns true if this point is on any screen (a.k.a. MainBoundary).\r\n        /// Used to check if a bullet is on screen (negative shrink value to account for the bullet graphic).\r\n        /// </summary>\r\n        ", "methodParams": {"globalPos": {"paramType": "Vector2", "defaultValue": "", "comment": ""}, "shrink": {"paramType": "float", "defaultValue": "", "comment": ""}}}]}, "Target": {"comment": "    ", "declarations": [{"id": "ID", "kind": "field", "mainType": "string", "defaultValue": "\"Target\"", "comment": "        // Multiple targets can have the same ID.\r\n        ", "methodParams": {}}, {"id": "GetNumberFromID", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"ID": {"paramType": "string", "defaultValue": "", "comment": ""}}}, {"id": "GetTargetCount", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"ID": {"paramType": "string", "defaultValue": "", "comment": ""}}}, {"id": "GetTargetCount", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "        ", "methodParams": {"IDNumber": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "GetClosest", "kind": "method", "mainType": "Transform2D", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"ID": {"paramType": "string", "defaultValue": "", "comment": ""}, "pos": {"paramType": "Vector2", "defaultValue": "", "comment": ""}}}, {"id": "GetClosest", "kind": "method", "mainType": "Transform2D", "defaultValue": "", "comment": "        ", "methodParams": {"IDNumber": {"paramType": "int", "defaultValue": "", "comment": ""}, "pos": {"paramType": "Vector2", "defaultValue": "", "comment": ""}}}, {"id": "GetPointerToTransform", "kind": "method", "mainType": "Transform2D*", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}]}, "GrazeLines": {"comment": "\t/// <summary>\r\n\t/// A sort of bonus effect class; draws a line between the player and bullet when graze occurs.\r\n\t/// </summary>\r\n\t", "declarations": [{"id": "maxLineCount", "kind": "field", "mainType": "int", "defaultValue": "32", "comment": "\t\t", "methodParams": {}}, {"id": "ShowLine", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n\t\t", "methodParams": {"start": {"paramType": "Vector2", "defaultValue": "", "comment": ""}, "end": {"paramType": "Vector2", "defaultValue": "", "comment": ""}}}]}, "Player": {"comment": "    ", "declarations": [{"id": "control", "kind": "field", "mainType": "Control", "defaultValue": "Control.SinglePlayer", "comment": "        /// <summary>\r\n        /// Determines the player's role.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "normalSpeed", "kind": "field", "mainType": "float", "defaultValue": "500", "comment": "        /// <summary>\r\n        /// Player's normal speed.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "focusedSpeed", "kind": "field", "mainType": "float", "defaultValue": "200", "comment": "        /// <summary>\r\n        /// Player's speed during the focus input.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "boundaryShrink", "kind": "field", "mainType": "float", "defaultValue": "30", "comment": "        /// <summary>\r\n        /// Unit count which shrinks the boundary that constrains the player to the screen.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "hurtbox", "kind": "field", "mainType": "BlastulaCollider", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "grazebox", "kind": "field", "mainType": "BlastulaCollider", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "framesBetweenLaserGraze", "kind": "field", "mainType": "float", "defaultValue": "8", "comment": "        ", "methodParams": {}}, {"id": "debugInvincible", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "\r\n        ", "methodParams": {}}, {"id": "varDiscs", "kind": "field", "mainType": "List<Blastodisc>", "defaultValue": "new List<Blastodisc>()", "comment": "\n        /// <summary>\r\n        /// Blastodiscs in this list will recieve important variables such as \"shoot\" and \"focus\".\r\n        /// These variables are important to make player shots function correctly.\r\n        /// </summary>\r\n        ", "methodParams": {}}, {"id": "playersByControl", "kind": "field", "mainType": "System.Collections.Generic.Dictionary<Control, Player>", "defaultValue": "new System.Collections.Generic.Dictionary<Control, Player>()", "comment": "        ", "methodParams": {}}, {"id": "OnHit", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"collider": {"paramType": "BlastulaCollider", "defaultValue": "", "comment": ""}, "bNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "IsShooting", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "IsFocused", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "GetMovementDirection", "kind": "method", "mainType": "Vector2", "defaultValue": "", "comment": "        ", "methodParams": {"normalized": {"paramType": "bool", "defaultValue": "false", "comment": ""}}}]}, "EnemyMover": {"comment": "    ", "declarations": [{"id": "easingTransition", "kind": "field", "mainType": "Tween.TransitionType", "defaultValue": "Tween.TransitionType.Quad", "comment": "        ", "methodParams": {}}, {"id": "easingType", "kind": "field", "mainType": "Tween.EaseType", "defaultValue": "Tween.EaseType.InOut", "comment": "        ", "methodParams": {}}, {"id": "startVelocity", "kind": "field", "mainType": "Vector2", "defaultValue": "Vector2.Zero", "comment": "        ", "methodParams": {}}, {"id": "tweenDuration", "kind": "field", "mainType": "float", "defaultValue": "0.5f", "comment": "        ", "methodParams": {}}, {"id": "radialVelocityInterpolation", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        ", "methodParams": {}}, {"id": "enemy", "kind": "field", "mainType": "Enemy", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}, {"id": "RadialToCartesian", "kind": "method", "mainType": "Vector2", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"v": {"paramType": "Vector2", "defaultValue": "", "comment": ""}}}, {"id": "CartesianToRadial", "kind": "method", "mainType": "Vector2", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"v": {"paramType": "Vector2", "defaultValue": "", "comment": ""}}}, {"id": "GetVelocity", "kind": "method", "mainType": "Vector2", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}, {"id": "SetTargetVelocity", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"newVelocity": {"paramType": "Vector2", "defaultValue": "", "comment": ""}}}, {"id": "SetTargetPosition", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"newPosition": {"paramType": "Vector2", "defaultValue": "", "comment": ""}}}]}, "Spawner": {"comment": "    /// <summary>\r\n    /// Spawn enemies using... you guessed it... a schedule.\r\n    /// </summary>\r\n    ", "declarations": [{"id": "spawnSchedule", "kind": "field", "mainType": "BaseSchedule", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "enemySamples", "kind": "field", "mainType": "PackedScene[]", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "repeatMode", "kind": "field", "mainType": "Repaint.PatternMode", "defaultValue": "Repaint.PatternMode.Loop", "comment": "        ", "methodParams": {}}, {"id": "spawnID", "kind": "field", "mainType": "int", "defaultValue": "0", "comment": "        /// <summary>\r\n        /// The spawnID starts at this number.\r\n        /// A \"spawn_id\" variable is set in enemies to be the count at the time it was created\r\n        /// (starting with this one -- by default the first enemy spawn has spawn_id == 0)\r\n        /// </summary>\r\n        ", "methodParams": {}}, {"id": "selfLifespan", "kind": "field", "mainType": "float", "defaultValue": "5", "comment": "        ", "methodParams": {}}, {"id": "selfLifespanUnits", "kind": "field", "mainType": "Wait.TimeUnits", "defaultValue": "Wait.TimeUnits.Seconds", "comment": "        ", "methodParams": {}}, {"id": "customData", "kind": "property", "mainType": "Dictionary<string, Variant>", "defaultValue": "new Dictionary<string, Variant>()", "comment": "        ", "methodParams": {}}, {"id": "specialNames", "kind": "property", "mainType": "HashSet<string>", "defaultValue": "new HashSet<string>()\r\n        {\r\n             \"pos\", \"spawn_id\", \"spawn_count\"\r\n        }", "comment": "        ", "methodParams": {}}, {"id": "GetSpecial", "kind": "method", "mainType": "Variant", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"varName": {"paramType": "string", "defaultValue": "", "comment": ""}}}, {"id": "Spawn", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}]}, "EnemyFormation": {"comment": "    /// <summary>\r\n    /// This is meant to be attached to the root of a scene which as loaded for a StageSector.\r\n    /// It can keep track of enemies and spawners, so that the sector ends when the last enemy is defeated.\r\n    /// </summary>\r\n    ", "declarations": [{"id": "enemyCount", "kind": "property", "mainType": "int", "defaultValue": "0", "comment": "        ", "methodParams": {}}, {"id": "spawnerCount", "kind": "property", "mainType": "int", "defaultValue": "0", "comment": "        ", "methodParams": {}}, {"id": "myStageSector", "kind": "field", "mainType": "StageSector", "defaultValue": "null", "comment": "\r\n        ", "methodParams": {}}, {"id": "CheckEmpty", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}, {"id": "IncrementEnemy", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}, {"id": "DecrementEnemy", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "IncrementSpawner", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "DecrementSpawner", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "        ", "methodParams": {}}]}, "Enemy": {"comment": "    /// <summary>\r\n    /// This contains variables for the purpose of movement scheduling.\r\n    /// </summary>\r\n    ", "declarations": [{"id": "health", "kind": "field", "mainType": "float", "defaultValue": "100", "comment": "\r\n        ", "methodParams": {}}, {"id": "lowHealthCutoff", "kind": "field", "mainType": "float", "defaultValue": "-1", "comment": "        ", "methodParams": {}}, {"id": "defenseMode", "kind": "field", "mainType": "DefenseMode", "defaultValue": "DefenseMode.Scale", "comment": "        ", "methodParams": {}}, {"id": "defense", "kind": "field", "mainType": "float", "defaultValue": "0", "comment": "        ", "methodParams": {}}, {"id": "movementSchedule", "kind": "field", "mainType": "BaseSchedule", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}, {"id": "deletionParticlePool", "kind": "field", "mainType": "string", "defaultValue": "\"ExplodeMedium\"", "comment": "\r\n        /// <summary>\r\n        /// A child of the enemy which is activated and placed into the parent when destroyed.\r\n        /// </summary>\r\n        ", "methodParams": {}}, {"id": "selfMinLifespan", "kind": "field", "mainType": "float", "defaultValue": "-1", "comment": "        ", "methodParams": {}}, {"id": "selfMaxLifespan", "kind": "field", "mainType": "float", "defaultValue": "-1", "comment": "        ", "methodParams": {}}, {"id": "lifespanUnits", "kind": "field", "mainType": "Wait.TimeUnits", "defaultValue": "Wait.TimeUnits.Frames", "comment": "        ", "methodParams": {}}, {"id": "lifeLeft", "kind": "property", "mainType": "float", "defaultValue": "float.PositiveInfinity", "comment": "\r\n        ", "methodParams": {}}, {"id": "maxHealth", "kind": "property", "mainType": "float", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "defeated", "kind": "property", "mainType": "bool", "defaultValue": "false", "comment": "        ", "methodParams": {}}, {"id": "onScreen", "kind": "property", "mainType": "bool", "defaultValue": "false", "comment": "        ", "methodParams": {}}, {"id": "customData", "kind": "property", "mainType": "System.Collections.Generic.Dictionary<string, Variant>", "defaultValue": "new System.Collections.Generic.Dictionary<string, Variant>()", "comment": "\r\n        ", "methodParams": {}}, {"id": "specialNames", "kind": "property", "mainType": "HashSet<string>", "defaultValue": "new HashSet<string>()\r\n        {\r\n            \"pos\", \"dpos\", \"enemy_count\", \"health_frac\", \"on_screen\"\r\n        }", "comment": "        ", "methodParams": {}}, {"id": "GetSpecial", "kind": "method", "mainType": "Variant", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"varName": {"paramType": "string", "defaultValue": "", "comment": ""}}}, {"id": "OnHit", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"collider": {"paramType": "BlastulaCollider", "defaultValue": "", "comment": ""}, "bNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "BecomeDefeated", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}, {"id": "BecameVisibleFromNotifier", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}, {"id": "NoLongerVisibleFromNotifier", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}, {"id": "AddOrGetEnemyMover", "kind": "method", "mainType": "EnemyMover", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"ID": {"paramType": "string", "defaultValue": "", "comment": ""}}}]}, "DefaultPauseMenu": {"comment": "    ", "declarations": [{"id": "state", "kind": "field", "mainType": "State", "defaultValue": "State.Unpaused", "comment": "        ", "methodParams": {}}, {"id": "PAUSE_OPEN_CLOSE_DELAY", "kind": "const", "mainType": "int", "defaultValue": "5", "comment": "        ", "methodParams": {}}, {"id": "UnpausingAnimation", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "PausingAnimation", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {}}]}, "SectorTimer": {"comment": "    ", "declarations": [{"id": "integerPart", "kind": "field", "mainType": "Label", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "fractionalPart", "kind": "field", "mainType": "Label", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "mainViewHolder", "kind": "field", "mainType": "Control", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "StageSectorChanged", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"newSector": {"paramType": "StageSector", "defaultValue": "", "comment": ""}}}]}, "StageManager": {"comment": "\t", "declarations": [{"id": "StageSectorChangedEventHandler", "kind": "delegate", "mainType": "void", "defaultValue": "", "comment": "        ", "methodParams": {"newSector": {"paramType": "StageSector", "defaultValue": "", "comment": ""}}}, {"id": "StageChangedEventHandler", "kind": "delegate", "mainType": "void", "defaultValue": "", "comment": "        ", "methodParams": {"newStage": {"paramType": "StageSector", "defaultValue": "", "comment": ""}}}, {"id": "main", "kind": "property", "mainType": "StageManager", "defaultValue": "null", "comment": "\r\n        ", "methodParams": {}}]}}}, "Blastula.Collision": {"classes": {"CollisionManager": {"comment": "    ", "declarations": [{"id": "objectLayersHolder", "kind": "field", "mainType": "Node", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "bulletLayersHolder", "kind": "field", "mainType": "Node", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "bulletLayerIDFromName", "kind": "field", "mainType": "Dictionary<string, int>", "defaultValue": "new Dictionary<string, int>()", "comment": "\n        ", "methodParams": {}}, {"id": "objectLayerIDFromName", "kind": "field", "mainType": "Dictionary<string, int>", "defaultValue": "new Dictionary<string, int>()", "comment": "        ", "methodParams": {}}, {"id": "objectsDetectedByBulletLayers", "kind": "field", "mainType": "List<List<int>>", "defaultValue": "new List<List<int>>()", "comment": "        ", "methodParams": {}}, {"id": "bulletLayerCount", "kind": "field", "mainType": "int", "defaultValue": "1", "comment": "\n        ", "methodParams": {}}, {"id": "objectLayerCount", "kind": "field", "mainType": "int", "defaultValue": "1", "comment": "        ", "methodParams": {}}, {"id": "debugTimer", "kind": "field", "mainType": "Stopwatch", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "GetObjectLayerIDFromName", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        ", "methodParams": {"name": {"paramType": "string", "defaultValue": "", "comment": ""}}}, {"id": "GetBulletLayerIDFromName", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        ", "methodParams": {"name": {"paramType": "string", "defaultValue": "", "comment": ""}}}]}, "CollisionSolver": {"comment": "\n    ", "declarations": [{"id": "Initialize", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "RegisterObject", "kind": "method", "mainType": "IntPtr", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Register an object for bullets to collide with.\n        /// IntPtr returned is a LinkedList&lt;IntPtr&gt;.Node for future deletion.\n        /// </summary>\n        ", "methodParams": {"objectInfoPtr": {"paramType": "IntPtr", "defaultValue": "", "comment": ""}, "objectLayer": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "UnregisterObject", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"deletionPtr": {"paramType": "IntPtr", "defaultValue": "", "comment": ""}, "objectLayer": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "ExecuteCollisionAll", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Execute this after all behaviors so there is no inconsistency with movement.\n        /// </summary>\n        ", "methodParams": {}}]}, "BlastulaCollider": {"comment": "    ", "declarations": [{"id": "shape", "kind": "field", "mainType": "Shape", "defaultValue": "Shape.Circle", "comment": "\n        ", "methodParams": {}}, {"id": "size", "kind": "field", "mainType": "Vector2", "defaultValue": "new Vector2(12, 0)", "comment": "        ", "methodParams": {}}, {"id": "objectLayer", "kind": "field", "mainType": "string", "defaultValue": "\"None\"", "comment": "        ", "methodParams": {}}, {"id": "showMode", "kind": "field", "mainType": "ShowMode", "defaultValue": "ShowMode.Editor", "comment": "        ", "methodParams": {}}, {"id": "CollisionEventHandler", "kind": "delegate", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"bNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "colliderInfo", "kind": "field", "mainType": "ObjectColliderInfo*", "defaultValue": "null", "comment": "\n        ", "methodParams": {}}, {"id": "collisions", "kind": "field", "mainType": "LinkedList<Collision>*", "defaultValue": "null", "comment": "        ", "methodParams": {}}, {"id": "deletionPtr", "kind": "field", "mainType": "IntPtr", "defaultValue": "IntPtr.Zero", "comment": "        ", "methodParams": {}}, {"id": "ID", "kind": "field", "mainType": "long", "defaultValue": "-1", "comment": "\n        ", "methodParams": {}}]}}}, "Blastula.Graphics": {"classes": {"BulletGraphicPreview": {"comment": "    ", "declarations": [{"id": "graphicsContainer", "kind": "field", "mainType": "Node", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "graphicName", "kind": "field", "mainType": "string", "defaultValue": "\"Default\"", "comment": "        ", "methodParams": {}}, {"id": "useMaterial", "kind": "field", "mainType": "bool", "defaultValue": "true", "comment": "        ", "methodParams": {}}, {"id": "countInCircle", "kind": "field", "mainType": "int", "defaultValue": "12", "comment": "        ", "methodParams": {}}, {"id": "circleRadiusMultiplier", "kind": "field", "mainType": "float", "defaultValue": "1", "comment": "        ", "methodParams": {}}, {"id": "collisionColor", "kind": "field", "mainType": "Color", "defaultValue": "new Color(0, 0, 0, 0)", "comment": "        ", "methodParams": {}}, {"id": "render", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        ", "methodParams": {}}]}, "BulletRendererManager": {"comment": "    /// <summary>\n    /// Drives the rendering of bullets. For lasers, see LaserRendererNode.\n    /// </summary>\n\t", "declarations": [{"id": "bulletGraphicsRoot", "kind": "field", "mainType": "Node", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "selectorSample", "kind": "field", "mainType": "MultimeshBullet", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "multiMeshSample", "kind": "field", "mainType": "MultiMesh", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "main", "kind": "field", "mainType": "BulletRendererManager", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "debugTimer", "kind": "field", "mainType": "Stopwatch", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "STAGE_TIME_ROLLOVER", "kind": "const", "mainType": "double", "defaultValue": "60.0 * 60.0 * 3.0", "comment": "\n        ", "methodParams": {}}, {"id": "STAGE_TIME_NAME", "kind": "field", "mainType": "string", "defaultValue": "\"STAGE_TIME\"", "comment": "        ", "methodParams": {}}, {"id": "GetGraphicInfoFromID", "kind": "method", "mainType": "GraphicInfo", "defaultValue": "", "comment": "\n        ", "methodParams": {"id": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "GetIDFromName", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        ", "methodParams": {"name": {"paramType": "string", "defaultValue": "", "comment": ""}}}, {"id": "GetNameFromID", "kind": "method", "mainType": "string", "defaultValue": "", "comment": "\n        ", "methodParams": {"ID": {"paramType": "int", "defaultValue": "", "comment": ""}}}]}, "GraphicInfo": {"comment": "\n    ", "declarations": [{"id": "texture", "kind": "field", "mainType": "Texture2D", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "modulate", "kind": "field", "mainType": "Color", "defaultValue": "Colors.White", "comment": "        ", "methodParams": {}}, {"id": "size", "kind": "field", "mainType": "Vector2", "defaultValue": "Vector2.One * 8", "comment": "        ", "methodParams": {}}, {"id": "material", "kind": "field", "mainType": "ShaderMaterial", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "unrotatedGraphic", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        ", "methodParams": {}}, {"id": "zIndex", "kind": "field", "mainType": "int", "defaultValue": "0", "comment": "        ", "methodParams": {}}, {"id": "autoRainbow", "kind": "field", "mainType": "Node", "defaultValue": "null", "comment": "        ", "methodParams": {}}, {"id": "collisionShape", "kind": "field", "mainType": "Collision.Shape", "defaultValue": "Collision.Shape.Circle", "comment": "        ", "methodParams": {}}, {"id": "collisionSize", "kind": "field", "mainType": "Vector2", "defaultValue": "new Vector2(12, 0)", "comment": "        ", "methodParams": {}}, {"id": "extraMultimeshFields", "kind": "field", "mainType": "ExtraMultimeshFields", "defaultValue": "0", "comment": "        ", "methodParams": {}}, {"id": "MakeMultimeshBullet", "kind": "method", "mainType": "MultimeshBullet", "defaultValue": "", "comment": "\n        ", "methodParams": {"selectorSample": {"paramType": "MultimeshBullet", "defaultValue": "", "comment": ""}, "multiMeshSample": {"paramType": "MultiMesh", "defaultValue": "", "comment": ""}, "newName": {"paramType": "string", "defaultValue": "", "comment": ""}}}, {"id": "MakeLaserMeshInstance", "kind": "method", "mainType": "MeshInstance2D", "defaultValue": "", "comment": "\n        ", "methodParams": {"meshInstanceSample": {"paramType": "MeshInstance2D", "defaultValue": "", "comment": ""}, "arrayMeshSample": {"paramType": "ArrayMesh", "defaultValue": "", "comment": ""}, "newName": {"paramType": "string", "defaultValue": "", "comment": ""}}}]}, "LaserRendererManager": {"comment": "    /// <summary>\n    /// Drives the rendering of lasers.\n    /// </summary>\n    ", "declarations": [{"id": "laserGraphicsRoot", "kind": "field", "mainType": "Node", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "meshInstanceSample", "kind": "field", "mainType": "MeshInstance2D", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "arrayMeshSample", "kind": "field", "mainType": "ArrayMesh", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "main", "kind": "field", "mainType": "LaserRendererManager", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "debugTimer", "kind": "field", "mainType": "Stopwatch", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "GetGraphicInfoFromID", "kind": "method", "mainType": "GraphicInfo", "defaultValue": "", "comment": "\n        ", "methodParams": {"id": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "GetIDFromName", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        ", "methodParams": {"name": {"paramType": "string", "defaultValue": "", "comment": ""}}}, {"id": "GetNameFromID", "kind": "method", "mainType": "string", "defaultValue": "", "comment": "\n        ", "methodParams": {"ID": {"paramType": "int", "defaultValue": "", "comment": ""}}}]}, "LaserRenderer": {"comment": "    /// <summary>\n    /// Used by the Renderer class. We only draw lasers here.\n    /// </summary>\n    ", "declarations": [{"id": "bNodeIndex", "kind": "field", "mainType": "int", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "purpose", "kind": "field", "mainType": "Purpose", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "lastGrazedFrame", "kind": "field", "mainType": "ulong", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "laserDataEntries", "kind": "field", "mainType": "CircularQueue<LaserDataEntry>*", "defaultValue": "null", "comment": "\n        /// <summary>\n        /// Outer index: laser render ID.\n        /// Stores lasers contiguously in the queue.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "nonzeroRenderIDs", "kind": "field", "mainType": "HashSet<int>", "defaultValue": "new HashSet<int>()", "comment": "\n        /// <summary>\n        /// Tracks the render IDs which currently exist in at least one bullet.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "renderedVertices", "kind": "field", "mainType": "Vector2[][]", "defaultValue": "null", "comment": "\n        /// <summary>\n        /// outer index = the laser render ID.\n        /// each vertex list is one triangle strip.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "renderedUVs", "kind": "field", "mainType": "Vector2[][]", "defaultValue": "null", "comment": "        ", "methodParams": {}}, {"id": "queuePositions", "kind": "field", "mainType": "int*", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Stores positions in the render queue, for later deletion.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "laserRenderWidthFromRenderIDs", "kind": "field", "mainType": "float*", "defaultValue": "null", "comment": "\n        ", "methodParams": {}}, {"id": "laserRenderStretchFromRenderIDs", "kind": "field", "mainType": "float*", "defaultValue": "null", "comment": "        ", "methodParams": {}}, {"id": "colliderInfoFromRenderIDs", "kind": "field", "mainType": "Collision.BulletColliderInfo*", "defaultValue": "null", "comment": "        ", "methodParams": {}}, {"id": "IsBNodeHeadOfLaser", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        ", "methodParams": {"bNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "IsBNodePartOfLaser", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        ", "methodParams": {"bNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "IsBNodeTailOfLaser", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        ", "methodParams": {"bNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "GetHeadBNodeOfLaser", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        ", "methodParams": {"bNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "NewGrazeThisFrame", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        /// <summary>\r\n        /// Determines if a new graze is possible for a laser in this frame.\r\n        /// If so, return true, and no more grazes will be possible this frame.\n        /// Otherwise return false.\n        /// We need this because multiple bullets in a laser can be grazed in the same frame.\n        /// </summary>\n        ", "methodParams": {"bNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}, "headBNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "RemoveLaserEntry", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"bNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "SetLaserFromHead", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"headBNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}, "newRenderID": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "Initialize", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"idCount": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "RenderAll", "kind": "method", "mainType": "List<int>", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Returns the list of structures that have been removed due to being empty.\n        /// </summary>\n        /// <returns></returns>\n        ", "methodParams": {}}]}, "ScreenSetup": {"comment": "    ", "declarations": [{"id": "objectViewports", "kind": "field", "mainType": "SubViewport[]", "defaultValue": "", "comment": "        ", "methodParams": {}}]}, "ParticleEffectPool": {"comment": "    ", "declarations": [{"id": "ID", "kind": "field", "mainType": "string", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "sample", "kind": "field", "mainType": "PackedScene", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "count", "kind": "field", "mainType": "int", "defaultValue": "50", "comment": "        ", "methodParams": {}}, {"id": "PlayEffect", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"ID": {"paramType": "string", "defaultValue": "", "comment": ""}, "position": {"paramType": "Vector2", "defaultValue": "", "comment": ""}}}]}, "BulletRenderer": {"comment": "    ", "declarations": [{"id": "bNodesFromRenderIDs", "kind": "field", "mainType": "CircularQueue<int>*", "defaultValue": "null", "comment": "        ", "methodParams": {}}, {"id": "nonzeroRenderIDs", "kind": "field", "mainType": "HashSet<int>", "defaultValue": "new HashSet<int>()", "comment": "        /// <summary>\n        /// Tracks the render IDs which currently exist in at least one bullet.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "renderedTransformArrays", "kind": "field", "mainType": "float[][]", "defaultValue": "null", "comment": "        /// <summary>\n        /// Outer index: render ID. <br />\n        /// Each inner array should resize to avoid the Multimesh bottleneck.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "queuePositions", "kind": "field", "mainType": "int*", "defaultValue": "", "comment": "        /// <summary>\n        /// Stores positions in the render queue, for later deletion.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "DELETION_COLOR_SHADER_PARAM", "kind": "field", "mainType": "string", "defaultValue": "\"tint\"", "comment": "\n        ", "methodParams": {}}, {"id": "deletionColorFromRenderIDs", "kind": "field", "mainType": "Color*", "defaultValue": "null", "comment": "        ", "methodParams": {}}, {"id": "meshSizeFromRenderIDs", "kind": "field", "mainType": "Vector2*", "defaultValue": "null", "comment": "        ", "methodParams": {}}, {"id": "colliderInfoFromRenderIDs", "kind": "field", "mainType": "Collision.BulletColliderInfo*", "defaultValue": "null", "comment": "        ", "methodParams": {}}, {"id": "unrotatedGraphicFromRenderIDs", "kind": "field", "mainType": "bool*", "defaultValue": "null", "comment": "        ", "methodParams": {}}, {"id": "extraMultimeshFieldsFromRenderIDs", "kind": "field", "mainType": "GraphicInfo.ExtraMultimeshFields*", "defaultValue": "null", "comment": "        ", "methodParams": {}}, {"id": "strideFromRenderIDs", "kind": "field", "mainType": "int*", "defaultValue": "null", "comment": "        ", "methodParams": {}}, {"id": "Initialize", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"idCount": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "SetRenderID", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"bNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}, "newRenderID": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "IsBulletOnScreen", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        /// <summary>\r\n        /// May give false positives.\r\n        /// </summary>\n        ", "methodParams": {"bNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "DELETION_EFFECT_FRAMES", "kind": "const", "mainType": "float", "defaultValue": "40", "comment": "\n        ", "methodParams": {}}, {"id": "DELETION_EFFECT_RECT_SIZE", "kind": "const", "mainType": "float", "defaultValue": "40", "comment": "        ", "methodParams": {}}, {"id": "ConvertToDeletionEffects", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"bNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "RenderAll", "kind": "method", "mainType": "List<int>", "defaultValue": "", "comment": "\r\n        /// <summary>\n        /// Returns the list of structures that have been removed due to being empty.\n        /// </summary>\n        /// <returns></returns>\n        ", "methodParams": {}}]}, "RainbowInfo": {"comment": "    /// <summary>\n    /// Holds the data to a type of rainbow, for use in applying them to bullet appearances.\n    /// </summary>\r\n    ", "declarations": [{"id": "shaderParamaterName", "kind": "field", "mainType": "string", "defaultValue": "\"tint\"", "comment": "        ", "methodParams": {}}, {"id": "colors", "kind": "field", "mainType": "Color[]", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "names", "kind": "field", "mainType": "string[]", "defaultValue": "", "comment": "        ", "methodParams": {}}]}, "MultimeshBullet": {"comment": "    ", "declarations": [{"id": "GetBufferCount", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "SetBuffer", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        // This memcpys your buffer to the multimesh buffer. Slow! But there's no other way yet.\r\n        ", "methodParams": {"buf": {"paramType": "float[]", "defaultValue": "", "comment": ""}, "visibleLength": {"paramType": "int", "defaultValue": "", "comment": ""}, "stride": {"paramType": "int", "defaultValue": "", "comment": ""}}}]}, "FPSDisplay": {"comment": "    ", "declarations": [{"id": "currFPS", "kind": "field", "mainType": "float", "defaultValue": "60", "comment": "        ", "methodParams": {}}, {"id": "main", "kind": "field", "mainType": "FPSDisplay", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}]}, "DefaultLogoController": {"comment": "\n    ", "declarations": [{"id": "mainLogo", "kind": "field", "mainType": "Control", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "debugNotification", "kind": "field", "mainType": "Control", "defaultValue": "", "comment": "        ", "methodParams": {}}]}}}, "Blastula.LowLevel": {"classes": {"BulletWorldTransforms": {"comment": "    /// <summary>\n    /// This class updates the world position of all BNodes as they appear in the masterQueue.\n    /// We require world position for rendering and collision checking.\n    /// </summary>\n    ", "declarations": [{"id": "transform", "kind": "field", "mainType": "Transform2D", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "versionNumber", "kind": "field", "mainType": "ulong", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "Initialize", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "Get", "kind": "method", "mainType": "Transform2D", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Get the world transform of a bullet.\n        /// \"Threadsafe\" because it only reads and populates, nothing changes.\n        /// Also, it's important that version number is set in this order.\n        /// At worst we do extra work by writing the same thing.\n        /// </summary>\n        ", "methodParams": {"bNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "Set", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        /// <summary>\r\n        /// Helper to set the local transform that results in the desired world transform.\r\n        /// </summary>\n        ", "methodParams": {"bNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}, "newWorldTransform": {"paramType": "Transform2D", "defaultValue": "", "comment": ""}}}, {"id": "Invalidate", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        /// <summary>\n        /// This forces us to recalculate the world position.\n        /// Important for lasers to not look extremely stupid.\n        /// </summary>\n        ", "methodParams": {"bNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}}}]}, "UnsafeCurveFunctions": {"comment": "\n    ", "declarations": [{"id": "Create", "kind": "method", "mainType": "UnsafeCurve*", "defaultValue": "", "comment": "        ", "methodParams": {"realCurve": {"paramType": "Curve", "defaultValue": "", "comment": ""}, "startTime": {"paramType": "float", "defaultValue": "", "comment": ""}, "endTime": {"paramType": "float", "defaultValue": "", "comment": ""}, "loopMode": {"paramType": "UnsafeCurve.LoopMode", "defaultValue": "", "comment": ""}, "stepFrames": {"paramType": "float", "defaultValue": "", "comment": ""}}}, {"id": "Dispose", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"curve": {"paramType": "UnsafeCurve", "defaultValue": "", "comment": ""}}}]}, "CircularQueueFunctions": {"comment": "\n    ", "declarations": [{"id": "Create", "kind": "method", "mainType": "CircularQueue<T>", "defaultValue": "", "comment": "        /// <summary>\n        /// Warning: we can only store one less than capacity.\n        /// </summary>\n        ", "methodParams": {"capacity": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "Count", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        ", "methodParams": {"queue": {"paramType": "CircularQueue<T>", "defaultValue": "", "comment": ""}}}, {"id": "SpaceFree", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        ", "methodParams": {"queue": {"paramType": "CircularQueue<T>", "defaultValue": "", "comment": ""}}}, {"id": "Add", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Returns the index where the space was made, for future tracking.\n        /// </summary>\n        ", "methodParams": {"queue": {"paramType": "CircularQueue<T>", "defaultValue": "", "comment": ""}, "item": {"paramType": "T", "defaultValue": "", "comment": ""}}}, {"id": "Remove", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        ", "methodParams": {"queue": {"paramType": "CircularQueue<T>", "defaultValue": "", "comment": ""}, "index": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "AdvanceTail", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Ensures the tail is the earliest initialized item.\n        /// </summary>\n        ", "methodParams": {"queue": {"paramType": "CircularQueue<T>", "defaultValue": "", "comment": ""}}}, {"id": "RetractHead", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Ensures the head is the next uninitialized item to claim.\n        /// </summary>\n        ", "methodParams": {"queue": {"paramType": "CircularQueue<T>", "defaultValue": "", "comment": ""}}}, {"id": "GetList", "kind": "method", "mainType": "CircularQueue<T>.TInit", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Gets the item as if this queue were a list, including holes. tail is index 0.\n        /// </summary>\n        ", "methodParams": {"queue": {"paramType": "CircularQueue<T>", "defaultValue": "", "comment": ""}, "index": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "Dispose", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"queue": {"paramType": "CircularQueue<T>", "defaultValue": "", "comment": ""}}}]}, "LinkedListFunctions": {"comment": "\r\n    ", "declarations": [{"id": "Create", "kind": "method", "mainType": "LinkedList<T>", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "AddHead", "kind": "method", "mainType": "LinkedList<T>.Node*", "defaultValue": "", "comment": "\n        ", "methodParams": {"l": {"paramType": "LinkedList<T>", "defaultValue": "", "comment": ""}, "v": {"paramType": "T", "defaultValue": "", "comment": ""}}}, {"id": "AddTail", "kind": "method", "mainType": "LinkedList<T>.Node*", "defaultValue": "", "comment": "\n        ", "methodParams": {"l": {"paramType": "LinkedList<T>", "defaultValue": "", "comment": ""}, "v": {"paramType": "T", "defaultValue": "", "comment": ""}}}, {"id": "GetHead", "kind": "method", "mainType": "T", "defaultValue": "", "comment": "\n        ", "methodParams": {"l": {"paramType": "LinkedList<T>", "defaultValue": "", "comment": ""}}}, {"id": "GetTail", "kind": "method", "mainType": "T", "defaultValue": "", "comment": "\n        ", "methodParams": {"l": {"paramType": "LinkedList<T>", "defaultValue": "", "comment": ""}}}, {"id": "RemoveHead", "kind": "method", "mainType": "T", "defaultValue": "", "comment": "\n        ", "methodParams": {"l": {"paramType": "LinkedList<T>", "defaultValue": "", "comment": ""}}}, {"id": "RemoveTail", "kind": "method", "mainType": "T", "defaultValue": "", "comment": "\n        ", "methodParams": {"l": {"paramType": "LinkedList<T>", "defaultValue": "", "comment": ""}}}, {"id": "RemoveByNode", "kind": "method", "mainType": "T", "defaultValue": "", "comment": "\n        ", "methodParams": {"l": {"paramType": "LinkedList<T>", "defaultValue": "", "comment": ""}, "n": {"paramType": "LinkedList<T>.Node*", "defaultValue": "", "comment": ""}}}, {"id": "Dispose", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"l": {"paramType": "LinkedList<T>", "defaultValue": "", "comment": ""}}}]}, "UnsafeArrayFunctions": {"comment": "\n    ", "declarations": [{"id": "Create", "kind": "method", "mainType": "UnsafeArray<T>", "defaultValue": "", "comment": "        ", "methodParams": {"count": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "Create", "kind": "method", "mainType": "UnsafeArray<T>", "defaultValue": "", "comment": "\n        ", "methodParams": {"arr": {"paramType": "List<T>", "defaultValue": "", "comment": ""}}}, {"id": "Clone", "kind": "method", "mainType": "UnsafeArray<T>", "defaultValue": "", "comment": "\n        ", "methodParams": {"a": {"paramType": "UnsafeArray<T>", "defaultValue": "", "comment": ""}}}, {"id": "CloneBehaviorOrder", "kind": "method", "mainType": "UnsafeArray<BehaviorOrder>", "defaultValue": "", "comment": "\n        ", "methodParams": {"a": {"paramType": "UnsafeArray<BehaviorOrder>", "defaultValue": "", "comment": ""}}}, {"id": "Set", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        ", "methodParams": {"a": {"paramType": "UnsafeArray<T>", "defaultValue": "", "comment": ""}, "index": {"paramType": "int", "defaultValue": "", "comment": ""}, "newValue": {"paramType": "T", "defaultValue": "", "comment": ""}}}, {"id": "Expand", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"a": {"paramType": "UnsafeArray<T>", "defaultValue": "", "comment": ""}, "howMany": {"paramType": "int", "defaultValue": "", "comment": ""}, "filler": {"paramType": "T", "defaultValue": "default", "comment": ""}}}, {"id": "Dispose", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"a": {"paramType": "UnsafeArray<T>", "defaultValue": "", "comment": ""}}}, {"id": "DisposeBehaviorOrder", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"a": {"paramType": "UnsafeArray<BehaviorOrder>", "defaultValue": "", "comment": ""}}}]}, "BehaviorOrderFunctions": {"comment": "\r\n    ", "declarations": [{"id": "empty", "kind": "field", "mainType": "BehaviorOrder", "defaultValue": "new BehaviorOrder() { func = null, data = null, dataSize = 0 }", "comment": "        ", "methodParams": {}}, {"id": "Clone", "kind": "method", "mainType": "BehaviorOrder", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"b": {"paramType": "BehaviorOrder*", "defaultValue": "", "comment": ""}}}, {"id": "Execute", "kind": "method", "mainType": "BehaviorReceipt", "defaultValue": "", "comment": "\n        ", "methodParams": {"nodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}, "b": {"paramType": "BehaviorOrder*", "defaultValue": "", "comment": ""}, "stepSize": {"paramType": "float", "defaultValue": "", "comment": ""}}}, {"id": "Dispose", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"b": {"paramType": "BehaviorOrder*", "defaultValue": "", "comment": ""}}}]}}}, "Blastula.Operations": {"classes": {"Spin": {"comment": "    /// <summary>\n    /// Also known as angular velocity!\n    /// </summary>\n    ", "declarations": [{"id": "mode", "kind": "field", "mainType": "Mode", "defaultValue": "Mode.RotateAfter", "comment": "\n        ", "methodParams": {}}, {"id": "speed", "kind": "field", "mainType": "string", "defaultValue": "\"60\"", "comment": "        /// <summary>\n        /// Degrees per second.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "speed", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "mode", "kind": "field", "mainType": "Mode", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "Execute", "kind": "method", "mainType": "BehaviorReceipt", "defaultValue": "", "comment": "\n        ", "methodParams": {"nodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}, "stepSize": {"paramType": "float", "defaultValue": "", "comment": ""}, "dataPtr": {"paramType": "void*", "defaultValue": "", "comment": ""}}}]}, "Adapt": {"comment": "    /// <summary>\n    /// After a number of frames, the structure rooted at this node will be deleted.\n    /// </summary>\n    ", "declarations": [{"id": "operation", "kind": "field", "mainType": "BaseOperation", "defaultValue": "", "comment": "        /// <summary>\n        /// The operation that applies to this BNode after the wait time elapses or the condition becomes true, whichever is earlier.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "condition", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        ", "methodParams": {}}, {"id": "wait", "kind": "field", "mainType": "string", "defaultValue": "\"120\"", "comment": "        ", "methodParams": {}}, {"id": "waitUnits", "kind": "field", "mainType": "Wait.TimeUnits", "defaultValue": "Wait.TimeUnits.Frames", "comment": "        ", "methodParams": {}}, {"id": "blastodisc", "kind": "field", "mainType": "Blastodisc", "defaultValue": "", "comment": "        /// <summary>\r\n        /// Optional blastodisc from which to use local variables.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "conditionValue", "kind": "field", "mainType": "bool*", "defaultValue": "null", "comment": "\n        ", "methodParams": {}}, {"id": "useCondition", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "conditionValue", "kind": "field", "mainType": "bool*", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "conditionOpID", "kind": "field", "mainType": "long", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "wait", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "\n            ", "methodParams": {}}, {"id": "currentTime", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "scheduledOpID", "kind": "field", "mainType": "long", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "queued", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "Execute", "kind": "method", "mainType": "BehaviorReceipt", "defaultValue": "", "comment": "\n        ", "methodParams": {"nodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}, "stepSize": {"paramType": "float", "defaultValue": "", "comment": ""}, "dataPtr": {"paramType": "void*", "defaultValue": "", "comment": ""}}}]}, "StunMultithreading": {"comment": "    /// <summary>\n    /// After a number of frames, the structure rooted at this node will be deleted.\n    /// </summary>\n    ", "declarations": [{"id": "duration", "kind": "field", "mainType": "string", "defaultValue": "\"120\"", "comment": "        ", "methodParams": {}}, {"id": "units", "kind": "field", "mainType": "Wait.TimeUnits", "defaultValue": "Wait.TimeUnits.Frames", "comment": "        ", "methodParams": {}}, {"id": "duration", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "currentTime", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "elapsed", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "Execute", "kind": "method", "mainType": "BehaviorReceipt", "defaultValue": "", "comment": "\n        ", "methodParams": {"nodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}, "stepSize": {"paramType": "float", "defaultValue": "", "comment": ""}, "dataPtr": {"paramType": "void*", "defaultValue": "", "comment": ""}}}]}, "ActOnBoundary": {"comment": "    /// <summary>\n    /// After a number of frames, the structure rooted at this node will be deleted.\n    /// </summary>\n    ", "declarations": [{"id": "specialAction", "kind": "field", "mainType": "SpecialAction", "defaultValue": "SpecialAction.Reflect", "comment": "\n        /// <summary>\n        /// Choose a special boundary-specific interaction.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "boundaryID", "kind": "field", "mainType": "string", "defaultValue": "", "comment": "        /// <summary>\n        /// The boundary's name.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "operation", "kind": "field", "mainType": "BaseOperation", "defaultValue": "", "comment": "        /// <summary>\n        /// Delayed operation to perform as soon as the final hit occurs.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "hits", "kind": "field", "mainType": "string", "defaultValue": "\"1\"", "comment": "        /// <summary>\n        /// The number of hits to execute with this boundary.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "shrink", "kind": "field", "mainType": "float", "defaultValue": "0", "comment": "        /// <summary>\n        /// The amount by which the boundary is shrunk. \n        /// Useful to make bullets appear to bounce at the edges instead of the center.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "reflectPerpendicular", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        /// <summary>\n        /// If true, reflection will make the target structure rotate perpendicularly to the wall,\n        /// instead of in the natural direction.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "boundInfo", "kind": "field", "mainType": "Boundary.LowLevelInfo*", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "specialAction", "kind": "field", "mainType": "SpecialAction", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "hitsRemaining", "kind": "field", "mainType": "int", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "opID", "kind": "field", "mainType": "long", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "shrink", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "reflectPerpendicular", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "Execute", "kind": "method", "mainType": "BehaviorReceipt", "defaultValue": "", "comment": "\n        ", "methodParams": {"nodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}, "stepSize": {"paramType": "float", "defaultValue": "", "comment": ""}, "dataPtr": {"paramType": "void*", "defaultValue": "", "comment": ""}}}]}, "TimeStretch": {"comment": "    /// <summary>\n    /// This alters the speed of time itself... over time. It's weird but it may be useful.\n    /// </summary>\n    ", "declarations": [{"id": "curve", "kind": "field", "mainType": "Curve", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "startTime", "kind": "field", "mainType": "string", "defaultValue": "\"0\"", "comment": "        ", "methodParams": {}}, {"id": "endTime", "kind": "field", "mainType": "string", "defaultValue": "\"60\"", "comment": "        ", "methodParams": {}}, {"id": "units", "kind": "field", "mainType": "Wait.TimeUnits", "defaultValue": "Wait.TimeUnits.Frames", "comment": "        ", "methodParams": {}}, {"id": "loopMode", "kind": "field", "mainType": "UnsafeCurve.LoopMode", "defaultValue": "UnsafeCurve.LoopMode.Neither", "comment": "        ", "methodParams": {}}, {"id": "curveShift", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        ", "methodParams": {}}, {"id": "reciprocated", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        ", "methodParams": {}}, {"id": "stepFrames", "kind": "field", "mainType": "float", "defaultValue": "3f", "comment": "        ", "methodParams": {}}, {"id": "curve", "kind": "field", "mainType": "UnsafeCurve*", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "curveSourceOperation", "kind": "field", "mainType": "long", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "currentTime", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "reciprocated", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "curveShift", "kind": "field", "mainType": "Vector4", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "BakeCurveIfNeeded", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "Execute", "kind": "method", "mainType": "BehaviorReceipt", "defaultValue": "", "comment": "\n        ", "methodParams": {"nodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}, "stepSize": {"paramType": "float", "defaultValue": "", "comment": ""}, "dataPtr": {"paramType": "void*", "defaultValue": "", "comment": ""}}}]}, "Forth": {"comment": "    /// <summary>\n    /// Move forward. The simplest behavior for all bullets. Ubiquitious in all bullet games!\n    /// </summary>\n    ", "declarations": [{"id": "mode", "kind": "field", "mainType": "Mode", "defaultValue": "Mode.MoveAfter", "comment": "\n        ", "methodParams": {}}, {"id": "speed", "kind": "field", "mainType": "string", "defaultValue": "\"100\"", "comment": "        /// <summary>\n        /// Forward movement speed in Godot units per second.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "worldSpaceHack", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        /// <summary>\r\n        /// Puts the BNode in world space instead of local space, which avoids matrix multiplications.\r\n        /// Useful if you want to squeeze out ridiculous performance, but the BNode will now ignore its parent.\r\n        /// So this hack works for only simple movement.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "speed", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "mode", "kind": "field", "mainType": "Mode", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "useWorldSpaceHack", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "Execute", "kind": "method", "mainType": "BehaviorReceipt", "defaultValue": "", "comment": "\n        ", "methodParams": {"nodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}, "stepSize": {"paramType": "float", "defaultValue": "", "comment": ""}, "dataPtr": {"paramType": "void*", "defaultValue": "", "comment": ""}}}, {"id": "Add", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"inStructure": {"paramType": "int", "defaultValue": "", "comment": ""}, "speed": {"paramType": "float", "defaultValue": "", "comment": ""}, "mode": {"paramType": "Mode", "defaultValue": "", "comment": ""}}}]}, "Lifespan": {"comment": "    /// <summary>\n    /// After some duration, the bullet structure will be deleted.\n    /// Just as organisms must die in reality, to avoid depleting the ecosystem's resources,\n    /// So must bullet structures die to make room in the master queue.\n    /// </summary>\n    ", "declarations": [{"id": "duration", "kind": "field", "mainType": "string", "defaultValue": "\"600\"", "comment": "        ", "methodParams": {}}, {"id": "units", "kind": "field", "mainType": "Wait.TimeUnits", "defaultValue": "Wait.TimeUnits.Frames", "comment": "        ", "methodParams": {}}, {"id": "deletionEffect", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        // Transforms visible bullets into deletion effects\n        ", "methodParams": {}}, {"id": "duration", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "deletionEffect", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "currentTime", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "Execute", "kind": "method", "mainType": "BehaviorReceipt", "defaultValue": "", "comment": "\n        ", "methodParams": {"nodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}, "stepSize": {"paramType": "float", "defaultValue": "", "comment": ""}, "dataPtr": {"paramType": "void*", "defaultValue": "", "comment": ""}}}, {"id": "Add", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"inStructure": {"paramType": "int", "defaultValue": "", "comment": ""}, "duration": {"paramType": "float", "defaultValue": "", "comment": ""}, "units": {"paramType": "Wait.TimeUnits", "defaultValue": "", "comment": ""}, "deletionEffect": {"paramType": "bool", "defaultValue": "false", "comment": ""}}}]}, "Aim": {"comment": "    /// <summary>\n    /// Aim towards a Target or fixed position. Sometimes we want bullets to actually try and hit something!!!\n    /// </summary>\n    ", "declarations": [{"id": "aimMode", "kind": "field", "mainType": "AimMode", "defaultValue": "AimMode.Instant", "comment": "\n        ", "methodParams": {}}, {"id": "targetType", "kind": "field", "mainType": "TargetType", "defaultValue": "TargetType.TargetNode", "comment": "        ", "methodParams": {}}, {"id": "targetName", "kind": "field", "mainType": "string", "defaultValue": "\"Player\"", "comment": "        ", "methodParams": {}}, {"id": "angularOffset", "kind": "field", "mainType": "string", "defaultValue": "\"0\"", "comment": "        /// <summary>\r\n        /// Degrees offset, to aim around the target instead of directly toward it.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "parentLevel", "kind": "field", "mainType": "int", "defaultValue": "1", "comment": "        /// <summary>\n        /// How many parents up must we go to solve a local position?\n        /// </summary> \n        ", "methodParams": {}}, {"id": "homingSpeed", "kind": "field", "mainType": "string", "defaultValue": "\"120\"", "comment": "        /// <summary>\r\n        /// Degrees per second to rotate towards a target.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "homingWindow", "kind": "field", "mainType": "string", "defaultValue": "\"Vector2(0, 60)\"", "comment": "        /// <summary>\r\n        /// If defined, it's a Vector2 with (X, Y) being the (start frame count, end frame count) of homing.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "aimMode", "kind": "field", "mainType": "AimMode", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "targetID", "kind": "field", "mainType": "int", "defaultValue": "", "comment": "\r\n            ", "methodParams": {}}, {"id": "targetPosition", "kind": "field", "mainType": "Vector2", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "targetPositionIsLocal", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "angularOffsetRadians", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "aimComplete", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "parentLevel", "kind": "field", "mainType": "int", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "homingSpeed", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "\n            ", "methodParams": {}}, {"id": "homingWindow", "kind": "field", "mainType": "Vector2", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "currentFrame", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "Execute", "kind": "method", "mainType": "BehaviorReceipt", "defaultValue": "", "comment": "\n        ", "methodParams": {"nodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}, "stepSize": {"paramType": "float", "defaultValue": "", "comment": ""}, "dataPtr": {"paramType": "void*", "defaultValue": "", "comment": ""}}}]}, "Morph": {"comment": "    /// <summary>\n    /// This can be used to delay the existence and function of a bullet,\n    /// or add the animation of the bullet appearing to fade into existence.\n    /// It can also interpolate color and custom data for Multimeshes.\n    /// </summary>\n    ", "declarations": [{"id": "appearance", "kind": "field", "mainType": "string", "defaultValue": "\"Mist\"", "comment": "        /// <summary>\n        /// The ID of the appearance during this time.\n        /// Leave it empty to not change the appearance.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "appearancePersists", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        /// <summary>\r\n        /// If true, the appearance will remain after emergence is complete.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "duration", "kind": "field", "mainType": "string", "defaultValue": "\"12\"", "comment": "        /// <summary>\n        /// Duration of the wait.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "durationUnits", "kind": "field", "mainType": "Wait.TimeUnits", "defaultValue": "Wait.TimeUnits.Frames", "comment": "        ", "methodParams": {}}, {"id": "scaleMultiplier", "kind": "field", "mainType": "float", "defaultValue": "3f", "comment": "        /// <summary>\n        /// Multiplies the scale by this much at the animation's beginning. Shrinks to original size throughout the emergence.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "throttle", "kind": "field", "mainType": "float", "defaultValue": "0.8f", "comment": "        /// <summary>\n        /// How much this throttles the following behaviors. 0 = behavior proceeds as normal. 1 = behavior stops.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "multimeshColor", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        /// <summary>\n        /// We expect a Color here. Interpolates to this over the duration of the behavior. \n        /// </summary>\n        ", "methodParams": {}}, {"id": "multimeshCustom", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        /// <summary>\n        /// We expect a Vector4 here. Interpolates to this over the duration of the behavior. \n        /// </summary>\n        ", "methodParams": {}}, {"id": "throttleOnEndFrame", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        /// <summary>\n        /// Whether this throttles on the last frame before it ends.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "throttle", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "throttleOnEndFrame", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "state", "kind": "field", "mainType": "State", "defaultValue": "", "comment": "\n            ", "methodParams": {}}, {"id": "duration", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "currentTime", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "tempRenderID", "kind": "field", "mainType": "int", "defaultValue": "", "comment": "\n            ", "methodParams": {}}, {"id": "origRenderID", "kind": "field", "mainType": "int", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "appearancePersists", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "scaleMultiplier", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "\n            ", "methodParams": {}}, {"id": "origScale", "kind": "field", "mainType": "Vector2", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "interpolateColor", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "\n            ", "methodParams": {}}, {"id": "origColor", "kind": "field", "mainType": "Color", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "targetColor", "kind": "field", "mainType": "Color", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "interpolateCustom", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "origCustom", "kind": "field", "mainType": "Vector4", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "targetCustom", "kind": "field", "mainType": "Vector4", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "Execute", "kind": "method", "mainType": "BehaviorReceipt", "defaultValue": "", "comment": "\n        ", "methodParams": {"nodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}, "stepSize": {"paramType": "float", "defaultValue": "", "comment": ""}, "dataPtr": {"paramType": "void*", "defaultValue": "", "comment": ""}}}]}, "Follow": {"comment": "    /// <summary>\n    /// Causes a bullet structure to follow a Target. Can follow smoothly!\n    /// </summary>\n    ", "declarations": [{"id": "mode", "kind": "field", "mainType": "Mode", "defaultValue": "Mode.Linear", "comment": "\n        ", "methodParams": {}}, {"id": "specificTarget", "kind": "field", "mainType": "Target", "defaultValue": "", "comment": "        /// <summary>\r\n        /// If defined, follow this particular target (useful for bullets to follow multiple enemies at once.)\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "targetName", "kind": "field", "mainType": "string", "defaultValue": "", "comment": "        /// <summary>\r\n        /// If specificTarget is not defined, the closest target with the given targetName is calculated every frame.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "maxSpeed", "kind": "field", "mainType": "string", "defaultValue": "\"300\"", "comment": "        /// <summary>\n        /// The fastest we can move to follow something, in units per second.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "rotateStructure", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        /// <summary>\r\n        /// If true, the BNode is rotated in the direction of its calculated follow movement.\r\n        /// </summary>\r\n        ", "methodParams": {}}, {"id": "followingWindow", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        /// <summary>\r\n        /// If defined, it's a Vector2 with (X, Y) being the (start frame count, end frame count) of following.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "approachRadius", "kind": "field", "mainType": "string", "defaultValue": "\"0\"", "comment": "        /// <summary>\r\n        /// The distance that the bullet will begin to slow down in its approach.\r\n        /// </summary>\r\n        ", "methodParams": {}}, {"id": "accel", "kind": "field", "mainType": "string", "defaultValue": "\"300\"", "comment": "        /// <summary>\r\n        /// With elastic movement, how quickly we can change the speed? In units per second^2.\r\n        /// </summary>\r\n        ", "methodParams": {}}, {"id": "initialVelocity", "kind": "field", "mainType": "string", "defaultValue": "\"Vector2(0, 0)\"", "comment": "        ", "methodParams": {}}, {"id": "mode", "kind": "field", "mainType": "Mode", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "specificTarget", "kind": "field", "mainType": "Transform2D*", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "targetID", "kind": "field", "mainType": "int", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "maxSpeed", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "accel", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "rotateStructure", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "followingWindow", "kind": "field", "mainType": "Vector2", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "approachRadius", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "currentFrame", "kind": "field", "mainType": "float", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "currentVelocity", "kind": "field", "mainType": "Vector2", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "Execute", "kind": "method", "mainType": "BehaviorReceipt", "defaultValue": "", "comment": "\n        ", "methodParams": {"nodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}, "stepSize": {"paramType": "float", "defaultValue": "", "comment": ""}, "dataPtr": {"paramType": "void*", "defaultValue": "", "comment": ""}}}]}, "CreateSingle": {"comment": "    ", "declarations": [{"id": "renderName", "kind": "field", "mainType": "string", "defaultValue": "\"None\"", "comment": "        ", "methodParams": {}}, {"id": "collisionLayerName", "kind": "field", "mainType": "string", "defaultValue": "\"EnemyShot\"", "comment": "        ", "methodParams": {}}, {"id": "sleepyCollision", "kind": "field", "mainType": "bool", "defaultValue": "true", "comment": "        ", "methodParams": {}}]}, "BaseOperation": {"comment": "    /// <summary>\r\n    /// Base class for all Blastula \"operations\". These normally work together to create a bullet structure in a Sequence,\r\n    /// but some can act independently in any schedule context.\r\n    /// </summary>\n    ", "declarations": [{"id": "ProcessStructure", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "        /// <summary>\n        /// Processes a bullet tree rooted at a certain BNode.\n        /// </summary>\n        /// <param name=\"inStructure\">Index of the input BNode in the master queue</param>\n        /// <returns>Index of the output BNode in the master queue.</returns>\n        ", "methodParams": {"inStructure": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "operationFromID", "kind": "field", "mainType": "Dictionary<long, BaseOperation>", "defaultValue": "new Dictionary<long, BaseOperation>()", "comment": "        ", "methodParams": {}}, {"id": "OperationIDExists", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        ", "methodParams": {"ID": {"paramType": "long", "defaultValue": "", "comment": ""}}}, {"id": "GetOperationID", "kind": "method", "mainType": "long", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "Solve", "kind": "method", "mainType": "Variant", "defaultValue": "", "comment": "\n        ", "methodParams": {"varName": {"paramType": "string", "defaultValue": "", "comment": ""}}}, {"id": "Unsolve", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        /// <summary>\r\n        /// Force recalculation of the expression at varName; for example, when it's changed.\r\n        /// </summary>\n        ", "methodParams": {"varName": {"paramType": "string", "defaultValue": "", "comment": ""}}}]}, "Modifier": {"comment": "    /// <summary>\n    /// An operation that only modifies the bullet structure in place.\n    /// </summary>\n    ", "declarations": [{"id": "ModifyStructure", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "        ", "methodParams": {"inStructure": {"paramType": "int", "defaultValue": "", "comment": ""}}}]}, "AddBehavior": {"comment": "    /// <summary>\n    /// A type of operation that adds behavior to a BNode.\n    /// </summary>\n    ", "declarations": [{"id": "CreateOrder", "kind": "method", "mainType": "BehaviorOrder", "defaultValue": "", "comment": "        ", "methodParams": {"inStructure": {"paramType": "int", "defaultValue": "", "comment": ""}}}]}, "Cascade": {"comment": "    /// <summary>\n    /// Operates on all nodes at a certain depth level within a BNode's structure.\n    /// Only ModifyOperation is allowed.\n    /// Depth is the maximum distance to a BNode with no children.\n    /// </summary>\n    ", "declarations": [{"id": "subOperation", "kind": "field", "mainType": "Modifier", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "mode", "kind": "field", "mainType": "Mode", "defaultValue": "Mode.Depth", "comment": "        ", "methodParams": {}}, {"id": "targetValue", "kind": "field", "mainType": "int", "defaultValue": "0", "comment": "        ", "methodParams": {}}, {"id": "recalculateDepths", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        ", "methodParams": {}}]}, "Comment": {"comment": "    /// <summary>\n    /// This operation does absolutely nothing. Insert it into a schedule or operation sequence\n    /// when you want to change the node's name to explain something.\n    /// </summary>\n    ", "declarations": []}, "Creator": {"comment": "    /// <summary>\n    /// Produces a bullet structure from nothing.\n    /// </summary>\n    ", "declarations": [{"id": "CreateStructure", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "        ", "methodParams": {}}]}, "Discrete": {"comment": "    /// <summary>\n    /// An operation that does absolutely nothing to any bullet structure.\n    /// Mainly used in certain self-contained operations,\n    /// such as setting a variable or playing a sound.\n    /// </summary>\n    ", "declarations": [{"id": "Run", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "        ", "methodParams": {}}]}, "ForEachChild": {"comment": "    /// <summary>\n    /// Applies an operation on all children, while linearly interpolating several numeric properties.\n    /// </summary>\n    ", "declarations": [{"id": "progressVariable", "kind": "field", "mainType": "string", "defaultValue": "\"t\"", "comment": "        /// <summary>\r\n        /// Interpolates from 0 to 1 as the operation progresses.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "circular", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        /// <summary>\r\n        /// If true, \r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "countVariable", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        /// <summary>\r\n        /// This variable counts the bullets starting at zero. 0, 1, 2, 3...\r\n        /// </summary>\n        ", "methodParams": {}}]}, "Macro": {"comment": "    /// <summary>\n    /// Opaque wrapper around a series of operations.\n    /// </summary>\n    ", "declarations": []}, "Reference": {"comment": "    /// <summary>\n    /// Perform another operation indirectly.\n    /// Can be used to interchange pipeline pieces during the game!\n    /// </summary>\n    ", "declarations": [{"id": "sequenceID", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        ", "methodParams": {}}, {"id": "other", "kind": "field", "mainType": "BaseOperation", "defaultValue": "", "comment": "        ", "methodParams": {}}]}, "Sequence": {"comment": "    /// <summary>\n    /// Applies (in tree order) all direct child operations of a node.\n    /// </summary>\n    ", "declarations": [{"id": "execute", "kind": "field", "mainType": "string", "defaultValue": "\"true\"", "comment": "        /// <summary>\r\n        /// Execute the sequence if this is true. Otherwise does nothing.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "referenceID", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        /// <summary>\r\n        /// Optional ID. If nonempty, this sequence can be referenced throughout all scenes, as long as it exists.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "referencesByID", "kind": "field", "mainType": "Dictionary<string, Sequence>", "defaultValue": "new Dictionary<string, Sequence>()", "comment": "        ", "methodParams": {}}, {"id": "ProcessStructureLikeSequence", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        ", "methodParams": {"holder": {"paramType": "Node", "defaultValue": "", "comment": ""}, "inStructure": {"paramType": "int", "defaultValue": "", "comment": ""}}}]}, "Shaper": {"comment": "    /// <summary>\n    /// A Shaper will add a defined shape to bullets. The way it adds shape is customizable.\n    /// </summary>\n    ", "declarations": [{"id": "number", "kind": "field", "mainType": "string", "defaultValue": "\"12\"", "comment": "\r\n\r\n        ", "methodParams": {}}, {"id": "shapingMode", "kind": "field", "mainType": "ShapingMode", "defaultValue": "ShapingMode.Clone", "comment": "        ", "methodParams": {}}, {"id": "rotationMode", "kind": "field", "mainType": "RotationMode", "defaultValue": "RotationMode.Full", "comment": "        ", "methodParams": {}}, {"id": "transformOrder", "kind": "field", "mainType": "TransformOrder", "defaultValue": "TransformOrder.ApplyBefore", "comment": "        ", "methodParams": {}}, {"id": "GetElementTransform", "kind": "method", "mainType": "Transform2D", "defaultValue": "", "comment": "\n        /// <summary>\n        /// i is the child index - imagine 0 to be the first and (number - 1) to be the last.\n        /// </summary>\n        ", "methodParams": {"i": {"paramType": "int", "defaultValue": "", "comment": ""}, "totalCount": {"paramType": "int", "defaultValue": "", "comment": ""}}}]}, "Polygon": {"comment": "    /// <summary>\n    /// Macro that places a polygon.<br />\n    /// </summary>\n    ", "declarations": [{"id": "sides", "kind": "field", "mainType": "string", "defaultValue": "\"5\"", "comment": "        ", "methodParams": {}}, {"id": "radius", "kind": "field", "mainType": "string", "defaultValue": "\"100\"", "comment": "        ", "methodParams": {}}, {"id": "bulletsPerSide", "kind": "field", "mainType": "string", "defaultValue": "\"10\"", "comment": "        ", "methodParams": {}}]}, "StarPolygon": {"comment": "    /// <summary>\n    /// Macro that places a star polygon.<br />\n    /// </summary>\n    ", "declarations": [{"id": "sides", "kind": "field", "mainType": "int", "defaultValue": "5", "comment": "        ", "methodParams": {}}, {"id": "leapSize", "kind": "field", "mainType": "int", "defaultValue": "2", "comment": "        ", "methodParams": {}}, {"id": "radius", "kind": "field", "mainType": "string", "defaultValue": "\"100\"", "comment": "        ", "methodParams": {}}, {"id": "bulletsPerSide", "kind": "field", "mainType": "string", "defaultValue": "\"18\"", "comment": "        ", "methodParams": {}}, {"id": "makeGCDCopies", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        /// <summary>\n        /// If true, this makes a deeper container with copies of the lower-sided stars,\n        /// if the leapSize and sides share a common factor.\n        /// This will make a star look complete even in that case -- for example the Star of David is two triangles;\n        /// it can be produced with sides = 6 and leapSize = 2 and makeGCDCopies = true.\n        /// </summary>\n        ", "methodParams": {}}]}, "ClearBehaviors": {"comment": "    /// <summary>\n    /// Deletes the behavior list of this BNode.\n    /// </summary>\n    ", "declarations": []}, "ForthByPosition": {"comment": "    /// <summary>\r\n    /// Takes the local position within each child, and converts it to a Forth behavior where distance becomes speed.\r\n    /// A simple way to add velocity in a certain shape, and apply positioning afterward.\r\n    /// </summary>\n    ", "declarations": [{"id": "forthMode", "kind": "field", "mainType": "Forth.Mode", "defaultValue": "Forth.Mode.MoveAfter", "comment": "        ", "methodParams": {}}, {"id": "rotationMode", "kind": "field", "mainType": "RotationMode", "defaultValue": "RotationMode.Set", "comment": "        ", "methodParams": {}}, {"id": "positionMultiplier", "kind": "field", "mainType": "string", "defaultValue": "\"0\"", "comment": "        /// <summary>\r\n        /// How much to retain the original positions?\r\n        /// </summary>\n        ", "methodParams": {}}]}, "InnerShift": {"comment": "    /// <summary>\n    /// We create an auxiliary structure homologous to this one,\n    /// apply its position information to the main structure,\n    /// and then delete the auxiliary structure.\n    /// </summary>\n    ", "declarations": [{"id": "auxiliary", "kind": "field", "mainType": "BaseOperation", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "transformMode", "kind": "field", "mainType": "Shift.Mode", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "rotationMode", "kind": "field", "mainType": "RotationMode", "defaultValue": "RotationMode.FromOtherRotation", "comment": "        ", "methodParams": {}}, {"id": "placement", "kind": "field", "mainType": "bool", "defaultValue": "true", "comment": "        ", "methodParams": {}}, {"id": "movementSpeed", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        ", "methodParams": {}}]}, "Repaint": {"comment": "    /// <summary>\n    /// Applies graphics automatically to children in patterns.\n    /// Of course nothing's stopping you from using only one graphic,\n    /// if you just want to replace them.\n    /// </summary>\n    ", "declarations": [{"id": "replaceMode", "kind": "field", "mainType": "ReplaceMode", "defaultValue": "ReplaceMode.DeepReplace", "comment": "\n        ", "methodParams": {}}, {"id": "repeatMode", "kind": "field", "mainType": "PatternMode", "defaultValue": "PatternMode.Loop", "comment": "        ", "methodParams": {}}, {"id": "graphicsList", "kind": "field", "mainType": "string[]", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "startOffset", "kind": "field", "mainType": "string", "defaultValue": "\"0\"", "comment": "        ", "methodParams": {}}, {"id": "SolvePatternIndex", "kind": "method", "mainType": "int", "defaultValue": "", "comment": "\n        ", "methodParams": {"index": {"paramType": "int", "defaultValue": "", "comment": ""}, "listLength": {"paramType": "int", "defaultValue": "", "comment": ""}, "mode": {"paramType": "PatternMode", "defaultValue": "", "comment": ""}}}]}, "SetCollisionData": {"comment": "    ", "declarations": [{"id": "newCollisionLayer", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        ", "methodParams": {}}, {"id": "graze", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        ", "methodParams": {}}, {"id": "power", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        ", "methodParams": {}}, {"id": "health", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        ", "methodParams": {}}]}, "SetMultimeshExtraData": {"comment": "    /// <summary>\r\n    /// Set color or custom data, as used in Multimesh fields. Useful to make bullets fade out or to pass special shader properties.\r\n    /// </summary>\n    ", "declarations": [{"id": "color", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        /// <summary>\r\n        /// We expect a Color here. \r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "custom", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        /// <summary>\r\n        /// We expect a Vector4 here.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "NewPointer", "kind": "method", "mainType": "BNodeMultimeshExtras*", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "Initialize", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"inStructure": {"paramType": "int", "defaultValue": "", "comment": ""}}}]}, "Shift": {"comment": "    /// <summary>\r\n    /// Move the transform of this BNode.\r\n    /// </summary>\n    ", "declarations": [{"id": "mode", "kind": "field", "mainType": "Mode", "defaultValue": "Mode.ApplyAfter", "comment": "\n        ", "methodParams": {}}, {"id": "childPlacement", "kind": "field", "mainType": "ChildPlacement", "defaultValue": "ChildPlacement.Attached", "comment": "        ", "methodParams": {}}, {"id": "rotation", "kind": "field", "mainType": "string", "defaultValue": "\"0\"", "comment": "        ", "methodParams": {}}, {"id": "offsetX", "kind": "field", "mainType": "string", "defaultValue": "\"0\"", "comment": "        ", "methodParams": {}}, {"id": "offsetY", "kind": "field", "mainType": "string", "defaultValue": "\"0\"", "comment": "        ", "methodParams": {}}, {"id": "scaleX", "kind": "field", "mainType": "string", "defaultValue": "\"1\"", "comment": "        ", "methodParams": {}}, {"id": "scaleY", "kind": "field", "mainType": "string", "defaultValue": "\"1\"", "comment": "        ", "methodParams": {}}]}, "Shuffle": {"comment": "    /// <summary>\n    /// Rearrange the children of a structure in useful ways.\n    /// </summary>\n    ", "declarations": [{"id": "mode", "kind": "field", "mainType": "Mode", "defaultValue": "Mode.Leap", "comment": "\n        ", "methodParams": {}}, {"id": "n", "kind": "field", "mainType": "string", "defaultValue": "", "comment": "        ", "methodParams": {}}]}, "Circle": {"comment": "    ", "declarations": [{"id": "radius", "kind": "field", "mainType": "string", "defaultValue": "\"48\"", "comment": "        ", "methodParams": {}}]}, "CloneInPlace": {"comment": "    ", "declarations": []}, "CurveScrimble": {"comment": "    /// <summary>\n    /// An extra-versatile shaper that can trace any parametric polar equation.<br />\n    /// </summary>\n    ", "declarations": [{"id": "radius", "kind": "field", "mainType": "Curve", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "angle", "kind": "field", "mainType": "Curve", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "circular", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        /// <summary>\n        /// If true, interpolation is contracted so that a circle doesn't have a redundant first point.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "radiusShift", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        ", "methodParams": {}}, {"id": "radiusLoopMode", "kind": "field", "mainType": "UnsafeCurve.LoopMode", "defaultValue": "UnsafeCurve.LoopMode.Neither", "comment": "        ", "methodParams": {}}, {"id": "angleShift", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        ", "methodParams": {}}, {"id": "angleLoopMode", "kind": "field", "mainType": "UnsafeCurve.LoopMode", "defaultValue": "UnsafeCurve.LoopMode.Neither", "comment": "        ", "methodParams": {}}]}, "PlaceRandom": {"comment": "    /// <summary>\n    /// Makes clones appear in a random sector of a washer: \n    /// a region bounded by two lines through the center and two circles around the center.\n    /// </summary>\n    ", "declarations": [{"id": "minRadius", "kind": "field", "mainType": "string", "defaultValue": "\"48\"", "comment": "        ", "methodParams": {}}, {"id": "maxRadius", "kind": "field", "mainType": "string", "defaultValue": "\"96\"", "comment": "        ", "methodParams": {}}, {"id": "minAngle", "kind": "field", "mainType": "string", "defaultValue": "\"0\"", "comment": "        ", "methodParams": {}}, {"id": "maxAngle", "kind": "field", "mainType": "string", "defaultValue": "\"90\"", "comment": "        ", "methodParams": {}}, {"id": "correctForArea", "kind": "field", "mainType": "bool", "defaultValue": "true", "comment": "        /// <summary>\n        /// If true, points at smaller radii will have a lower chance of being chosen,\n        /// such that there is a uniform chance of bullets spawning throughout the area.\n        /// </summary>\n        ", "methodParams": {}}]}, "Scrimble": {"comment": "    /// <summary>\n    /// A parametric \"line segment\", in polar coordinates. <br />\n    /// This versatile shaper can create rings, spreads, stacks, and more!<br />\n    /// (Of course the classic shapes still exist for convenience.)\n    /// </summary>\n    ", "declarations": [{"id": "startRadius", "kind": "field", "mainType": "string", "defaultValue": "\"48\"", "comment": "        ", "methodParams": {}}, {"id": "endRadius", "kind": "field", "mainType": "string", "defaultValue": "\"96\"", "comment": "        ", "methodParams": {}}, {"id": "startAngle", "kind": "field", "mainType": "string", "defaultValue": "\"0\"", "comment": "        ", "methodParams": {}}, {"id": "endAngle", "kind": "field", "mainType": "string", "defaultValue": "\"90\"", "comment": "        ", "methodParams": {}}, {"id": "circular", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        /// <summary>\n        /// If true, interpolation is contracted so that a circle doesn't have a redundant first point.\n        /// </summary>\n        ", "methodParams": {}}]}, "Spread": {"comment": "    /// <summary>\r\n    /// Also known as a fan. Places an arc of bullets.\r\n    /// </summary>\n    ", "declarations": [{"id": "radius", "kind": "field", "mainType": "string", "defaultValue": "\"48\"", "comment": "        ", "methodParams": {}}, {"id": "angularWidth", "kind": "field", "mainType": "string", "defaultValue": "\"180\"", "comment": "        ", "methodParams": {}}]}, "Stack": {"comment": "    /// <summary>\n    /// A row of bullets with the same direction from the center, but different distance from the center.\n    /// </summary>\n    ", "declarations": [{"id": "startRadius", "kind": "field", "mainType": "string", "defaultValue": "\"48\"", "comment": "        ", "methodParams": {}}, {"id": "endRadius", "kind": "field", "mainType": "string", "defaultValue": "\"96\"", "comment": "        ", "methodParams": {}}, {"id": "angle", "kind": "field", "mainType": "string", "defaultValue": "\"0\"", "comment": "        ", "methodParams": {}}]}, "Reflect": {"comment": "    /// <summary>\r\n    /// Clone the BNode and reflect it across an axis. Useful for bilaterally symmetric patterns.\r\n    /// </summary>\n    ", "declarations": [{"id": "axisAngle", "kind": "field", "mainType": "string", "defaultValue": "\"90\"", "comment": "        /// <summary>\n        /// Angle the reflection axis makes with the transform's rightwards direction, in degrees. Clockwise by Godot convention.\n        /// </summary>\n        ", "methodParams": {}}]}, "PlaceOnPath2D": {"comment": "    /// <summary>\r\n    /// Place clones along a Path2D. \r\n    /// Local space in the path translates to local space of the inStructure.\r\n    /// </summary>\n    ", "declarations": [{"id": "path2D", "kind": "field", "mainType": "Path2D", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "shrink", "kind": "field", "mainType": "float", "defaultValue": "10", "comment": "        ", "methodParams": {}}, {"id": "extraRotation", "kind": "field", "mainType": "string", "defaultValue": "\"0\"", "comment": "        ", "methodParams": {}}, {"id": "circular", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "        ", "methodParams": {}}]}, "SetVar": {"comment": "    /// <summary>\r\n    /// Set a temporary variable to use in further calculations.\r\n    /// This also works in schedulers, and can change an existing variable.\r\n    /// </summary>\n    ", "declarations": [{"id": "varName", "kind": "field", "mainType": "string", "defaultValue": "\"temp\"", "comment": "\n        /// <summary>\r\n        /// The variable's name.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "environment", "kind": "field", "mainType": "Environment", "defaultValue": "Environment.Local", "comment": "        /// <summary>\r\n        /// The scope where you are setting this variable.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "newValue", "kind": "field", "mainType": "string", "defaultValue": "\"sqrt(pow(3, 2) + pow(4, 2))\"", "comment": "        ", "methodParams": {}}, {"id": "customEnvironment", "kind": "field", "mainType": "Node", "defaultValue": "null", "comment": "        /// <summary>\r\n        /// Used when environment is Custom. Sets virtual variable if it's a BaseVariableContainer,\r\n        /// otherwise sets a Godot variable.\r\n        /// </summary>\n        ", "methodParams": {}}]}, "UnsetVar": {"comment": "    /// <summary>\r\n    /// Remove a temporary variable.\r\n    /// Not necessary, but gives you the peace of mind that memory won't be occupied by unused variables.\r\n    /// </summary>\n    ", "declarations": [{"id": "varName", "kind": "field", "mainType": "string", "defaultValue": "\"temp\"", "comment": "        /// <summary>\r\n        /// The variable's name.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "environment", "kind": "field", "mainType": "SetVar.Environment", "defaultValue": "SetVar.Environment.Local", "comment": "        /// <summary>\r\n        /// The scope where you are setting this variable.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "customEnvironment", "kind": "field", "mainType": "Node", "defaultValue": "null", "comment": "        /// <summary>\r\n        /// Used when environment is Custom. Sets virtual variable if it's a BaseVariableContainer,\r\n        /// otherwise sets a Godot variable.\r\n        /// </summary>\n        ", "methodParams": {}}]}, "Connect": {"comment": "    /// <summary>\n    /// Connects the children of a structure with lines of same bullets. Literally \"connect the dots\"!\n    /// Also interpolates rotation and scale.<br />\n    /// </summary>\n    ", "declarations": [{"id": "structure", "kind": "field", "mainType": "Structure", "defaultValue": "Structure.Flat", "comment": "\n        ", "methodParams": {}}, {"id": "lineType", "kind": "field", "mainType": "LineType", "defaultValue": "LineType.Line", "comment": "        ", "methodParams": {}}, {"id": "number", "kind": "field", "mainType": "string", "defaultValue": "\"8\"", "comment": "        /// <summary>\n        /// The number of bullets that fill out each line.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "circular", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "        /// <summary>\n        /// If true, the last item will be connected to the first.\n        /// </summary>\n        ", "methodParams": {}}]}, "Deepen": {"comment": "    /// <summary>\n    /// Puts the children into groups of a new structure such that they become the childrens' children.<br />\n    /// You can choose the size of the groups. Extraneous children that can't form a group are deleted.\n    /// </summary>\n    ", "declarations": [{"id": "groupSize", "kind": "field", "mainType": "string", "defaultValue": "\"12\"", "comment": "        ", "methodParams": {}}]}, "Flatten": {"comment": "    /// <summary>\n    /// Puts the children into groups of a new structure such that they become the childrens' children.<br />\n    /// You can choose the size of the groups. Extraneous children that can't form a group are deleted.\n    /// </summary>\n    ", "declarations": [{"id": "keepEmptyChildren", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        /// <summary>\r\n        /// Determines what to do with children that have zero children.\r\n        /// False: Children with zero children are deleted, to keep remaining leaves on the same former level.\r\n        /// True: Children with zero children are kept, to retain all former leaves.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "complete", "kind": "field", "mainType": "bool", "defaultValue": "true", "comment": "        /// <summary>\r\n        /// If true, this will repeatedly flatten the structure until no child has children.\r\n        /// </summary>\n        ", "methodParams": {}}]}, "Sound": {"comment": "    /// <summary>\r\n    /// Plays a sound effect by direct reference or a common name.\r\n    /// </summary>\r\n    ", "declarations": [{"id": "soundObject", "kind": "field", "mainType": "Node", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "commonSFXName", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        ", "methodParams": {}}, {"id": "pitch", "kind": "field", "mainType": "string", "defaultValue": "\"1\"", "comment": "        ", "methodParams": {}}, {"id": "volume", "kind": "field", "mainType": "string", "defaultValue": "\"1\"", "comment": "        ", "methodParams": {}}]}, "Trail": {"comment": "    /// <summary>\n    /// Add a trail of bullets that mimic the head bullet exactly. Also creates lasers.\n    /// </summary>\n    ", "declarations": [{"id": "number", "kind": "field", "mainType": "string", "defaultValue": "\"8\"", "comment": "        /// <summary>\n        /// The amount of bullets in the trail.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "frameDelay", "kind": "field", "mainType": "string", "defaultValue": "\"2\"", "comment": "        /// <summary>\n        /// The number of frames between each bullet in the trail.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "laserRenderName", "kind": "field", "mainType": "string", "defaultValue": "\"None\"", "comment": "        ", "methodParams": {}}, {"id": "initializedDefaultTransform", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "defaultTransform", "kind": "field", "mainType": "Transform2D", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "worldPosBuffer", "kind": "field", "mainType": "UnsafeArray<Transform2D>", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "filled", "kind": "field", "mainType": "bool", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "currentUnscaledFrame", "kind": "field", "mainType": "int", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "Execute", "kind": "method", "mainType": "BehaviorReceipt", "defaultValue": "", "comment": "\n        ", "methodParams": {"nodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}, "stepSize": {"paramType": "float", "defaultValue": "", "comment": ""}, "dataPtr": {"paramType": "void*", "defaultValue": "", "comment": ""}}}, {"id": "CloneData", "kind": "method", "mainType": "void*", "defaultValue": "", "comment": "\n        ", "methodParams": {"dataPtr": {"paramType": "void*", "defaultValue": "", "comment": ""}}}, {"id": "DisposeData", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"dataPtr": {"paramType": "void*", "defaultValue": "", "comment": ""}}}, {"id": "CreateOrder", "kind": "method", "mainType": "BehaviorOrder", "defaultValue": "", "comment": "\n        ", "methodParams": {"frameDelay": {"paramType": "int", "defaultValue": "", "comment": ""}, "startFrame": {"paramType": "int", "defaultValue": "", "comment": ""}}}]}}}, "Blastula.Sounds": {"classes": {"Music": {"comment": "    ", "declarations": [{"id": "main", "kind": "property", "mainType": "Music", "defaultValue": "null", "comment": "        ", "methodParams": {}}]}, "CommonSFXManager": {"comment": "    ", "declarations": [{"id": "sfxBusName", "kind": "field", "mainType": "string", "defaultValue": "\"SFX\"", "comment": "        /// <summary>\r\n        /// If this string is non-empty, the audio bus of each effect will use it.\r\n        /// </summary>\r\n        ", "methodParams": {}}, {"id": "main", "kind": "property", "mainType": "CommonSFXManager", "defaultValue": "null", "comment": "\r\n        ", "methodParams": {}}, {"id": "Play", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"n": {"paramType": "Node", "defaultValue": "", "comment": ""}, "pitch": {"paramType": "float", "defaultValue": "1f", "comment": ""}, "volume": {"paramType": "float", "defaultValue": "1f", "comment": ""}, "position": {"paramType": "Vector2", "defaultValue": "default", "comment": ""}, "move": {"paramType": "bool", "defaultValue": "false", "comment": ""}}}, {"id": "PlayByName", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"name": {"paramType": "string", "defaultValue": "", "comment": ""}, "pitch": {"paramType": "float", "defaultValue": "1f", "comment": ""}, "volume": {"paramType": "float", "defaultValue": "1f", "comment": ""}, "position": {"paramType": "Vector2", "defaultValue": "default", "comment": ""}, "move": {"paramType": "bool", "defaultValue": "false", "comment": ""}}}]}}}, "Blastula.Input": {"classes": {"InputManager": {"comment": "    /// <summary>\n    /// Handles input for us in a centralized way.\n    /// </summary>\n    ", "declarations": [{"id": "buttonsHolder", "kind": "field", "mainType": "Node", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "Reconfigure", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"newButtonsHolder": {"paramType": "Node", "defaultValue": "", "comment": ""}}}, {"id": "GetRawCurrentState", "kind": "method", "mainType": "ulong", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "GetRawStartedState", "kind": "method", "mainType": "ulong", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "GetRawEndedState", "kind": "method", "mainType": "ulong", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "ButtonPressedThisFrame", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        ", "methodParams": {"comp": {"paramType": "ulong", "defaultValue": "", "comment": ""}}}, {"id": "ButtonPressedThisFrame", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        ", "methodParams": {"comp": {"paramType": "string", "defaultValue": "", "comment": ""}}}, {"id": "ButtonReleasedThisFrame", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        ", "methodParams": {"comp": {"paramType": "ulong", "defaultValue": "", "comment": ""}}}, {"id": "ButtonReleasedThisFrame", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        ", "methodParams": {"comp": {"paramType": "string", "defaultValue": "", "comment": ""}}}, {"id": "ButtonIsDown", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        ", "methodParams": {"comp": {"paramType": "ulong", "defaultValue": "", "comment": ""}}}, {"id": "ButtonIsDown", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        ", "methodParams": {"comp": {"paramType": "string", "defaultValue": "", "comment": ""}}}, {"id": "ButtonIsHeldLongEnough", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n\n        /// <summary>\n        /// Warning: this is always false when testing multiple buttons.\n        /// </summary>\n        ", "methodParams": {"comp": {"paramType": "ulong", "defaultValue": "", "comment": ""}, "frames": {"paramType": "ulong", "defaultValue": "", "comment": ""}}}, {"id": "ButtonIsHeldLongEnough", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Warning: this is always 0 when testing multiple buttons.\n        /// </summary>\n        ", "methodParams": {"comp": {"paramType": "string", "defaultValue": "", "comment": ""}, "frames": {"paramType": "ulong", "defaultValue": "", "comment": ""}}}, {"id": "GetButtonHeldFrames", "kind": "method", "mainType": "ulong", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Warning: this is always 0 when testing multiple buttons.\n        /// </summary>\n        ", "methodParams": {"comp": {"paramType": "ulong", "defaultValue": "", "comment": ""}}}, {"id": "GetButtonHeldFrames", "kind": "method", "mainType": "ulong", "defaultValue": "", "comment": "\n        /// <summary>\n        /// Warning: this is always 0 when testing multiple buttons.\n        /// </summary>\n        ", "methodParams": {"comp": {"paramType": "string", "defaultValue": "", "comment": ""}}}]}, "ButtonInfo": {"comment": "    ", "declarations": [{"id": "defaultKey", "kind": "field", "mainType": "Key", "defaultValue": "Key.None", "comment": "        /// <summary>\n        /// Default key that triggers this button when other inputs aren't configured or aren't available.\n        /// </summary>\n        ", "methodParams": {}}]}}}, "Blastula.Debug": {"classes": {"GameFlow": {"comment": "    ", "declarations": [{"id": "frozen", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        ", "methodParams": {}}, {"id": "commandGroup", "kind": "field", "mainType": "DebugConsole.CommandGroup", "defaultValue": "new DebugConsole.CommandGroup\r\n        {\r\n            groupName = \"Game Flow\",\r\n            commands = new System.Collections.Generic.List<DebugConsole.Command>()\r\n            {\r\n                new DebugConsole.Command\r\n                {\r\n                    name = \"speed\",\r\n                    usageTip = \"speed {new time scale}\",\r\n                    description = \"Changes the time scale of the game (once it's unpaused).\",\r\n                    action = (args) =>\r\n                    {\r\n                        float newTimeScale = 1;\r\n                        if (args.Count >= 2)\r\n                        {\r\n                            if (!float.TryParse(args[1], out newTimeScale))\r\n                            {\r\n                                DebugConsole.main.Print(\"No action: time scale must be a number within [lb]0.1, 10[rb].\");\r\n                                return;\r\n                            }\r\n                        }\r\n                        if (newTimeScale != Mathf.Clamp(newTimeScale, 0.1f, 10f))\r\n                        {\r\n                            DebugConsole.main.Print(\"No action: time scale must be a number within [lb]0.1, 10[rb].\");\r\n                            return;\r\n                        }\r\n                        Session.main.SetTimeScale(newTimeScale);\r\n                        DebugConsole.main.Print($\"Time scale is now {newTimeScale}\");\r\n                    }\r\n                },\r\n\r\n                new DebugConsole.Command\r\n                {\r\n                    name = \"freeze\",\r\n                    usageTip = \"freeze {on/off}\",\r\n                    description = \"When the game is frozen, all bullet behavior, firing, enemy movement, and stage progression will be stopped. \" +\r\n                                  \"Player actions aren't stopped.\",\r\n                    action = (args) =>\r\n                    {\r\n                        frozen = !frozen;\r\n                        if (args.Count >= 2) { DebugConsole.SetTruthValue(args[1], ref frozen); }\r\n                        DebugConsole.main.Print($\"The game is now {(frozen ? \"frozen\" : \"unfrozen\")}.\");\r\n                    }\r\n                },\r\n\r\n                new DebugConsole.Command\r\n                {\r\n                    name = \"difficulty\",\r\n                    usageTip = \"difficulty {number}\",\r\n                    description = \"Sets game difficulty by its internally identifying number.\",\r\n                    action = (args) =>\r\n                    {\r\n                        if (args.Count >= 2 && int.TryParse(args[1], out int newDif))\r\n                        {\r\n                            Session.main.SetDifficulty(newDif);\r\n                            DebugConsole.main.Print($\"Difficulty set to {Session.main.difficulty}\");\r\n                        }\r\n                        else\r\n                        {\r\n                            DebugConsole.main.Print(\"Difficulty not changed: invalid input.\");\r\n                        }\r\n                    }\r\n                },\r\n\r\n                new DebugConsole.Command\r\n                {\r\n                    name = \"rank\",\r\n                    usageTip = \"rank {number} {freeze: on/off}\",\r\n                    description = \"Sets game rank to number. You can also freeze rank at the number, using the second parameter.\",\r\n                    action = (args) =>\r\n                    {\r\n                        if (args.Count >= 2 && float.TryParse(args[1], out float newRank))\r\n                        {\r\n                            Session.main.SetRank(newRank, true);\r\n                            bool frozen = false;\r\n                            if (args.Count >= 3) { DebugConsole.SetTruthValue(args[2], ref frozen); }\r\n                            Session.main.rankFrozen = frozen;\r\n                            DebugConsole.main.Print($\"Rank set to {Session.main.rank}; {(frozen ? \"frozen\" : \"unfrozen\")}\");\r\n                        }\r\n                        else\r\n                        {\r\n                            DebugConsole.main.Print(\"Rank not changed: invalid input.\");\r\n                        }\r\n                    }\r\n                },\r\n            }\r\n        }", "comment": "\r\n        ", "methodParams": {}}]}, "DebugConsole": {"comment": "    ", "declarations": [{"id": "paused", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        ", "methodParams": {}}, {"id": "inputLine", "kind": "field", "mainType": "LineEdit", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "lastText", "kind": "field", "mainType": "RichTextLabel", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "main", "kind": "field", "mainType": "DebugConsole", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}, {"id": "SetTruthValue", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"text": {"paramType": "string", "defaultValue": "", "comment": ""}, "set": {"paramType": "bool", "defaultValue": "", "comment": ""}}}, {"id": "Tokenize", "kind": "method", "mainType": "List<string>", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"text": {"paramType": "string", "defaultValue": "", "comment": ""}}}, {"id": "Print", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"text": {"paramType": "string", "defaultValue": "", "comment": ""}}}, {"id": "CloseExternal", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}, {"id": "GetCommandFromName", "kind": "method", "mainType": "Command", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"name": {"paramType": "string", "defaultValue": "", "comment": ""}}}, {"id": "ExecuteCommand", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"command": {"paramType": "string", "defaultValue": "", "comment": ""}}}]}, "DebugConsole+CommandGroup": {"comment": "\r\n        ", "declarations": [{"id": "groupName", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "            ", "methodParams": {}}, {"id": "commands", "kind": "field", "mainType": "List<Command>", "defaultValue": "new List<Command>()", "comment": "            ", "methodParams": {}}, {"id": "MatchName", "kind": "method", "mainType": "Command", "defaultValue": "", "comment": "            ", "methodParams": {"commandName": {"paramType": "string", "defaultValue": "", "comment": ""}}}]}, "DebugConsole+Command": {"comment": "\r\n        ", "declarations": [{"id": "name", "kind": "field", "mainType": "string", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "aliases", "kind": "field", "mainType": "List<string>", "defaultValue": "new List<string>()", "comment": "            ", "methodParams": {}}, {"id": "usageTip", "kind": "field", "mainType": "string", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "description", "kind": "field", "mainType": "string", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "action", "kind": "field", "mainType": "Action<List<string>>", "defaultValue": "", "comment": "            ", "methodParams": {}}, {"id": "AliasesToString", "kind": "method", "mainType": "string", "defaultValue": "", "comment": "\r\n            ", "methodParams": {}}]}, "DebugCollision": {"comment": "    ", "declarations": [{"id": "showCollisionShapes", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        ", "methodParams": {}}, {"id": "collisionShapesColor", "kind": "field", "mainType": "Color", "defaultValue": "Colors.Green", "comment": "        ", "methodParams": {}}, {"id": "commandGroup", "kind": "field", "mainType": "DebugConsole.CommandGroup", "defaultValue": "new DebugConsole.CommandGroup\r\n        {\r\n            groupName = \"Collision\",\r\n            commands = new System.Collections.Generic.List<DebugConsole.Command>()\r\n            {\r\n                new DebugConsole.Command\r\n                {\r\n                    name = \"col_shapes\",\r\n                    usageTip = \"col_shapes {on/off} {color}\",\r\n                    description = \"Shows the collision shapes of all active colliders handled by Blastula, including bullets and lasers. \" +\r\n                                  \"This will likely severely hurt performance.\",\r\n                    action = (args) =>\r\n                    {\r\n                        showCollisionShapes = !showCollisionShapes;\r\n                        if (args.Count >= 2) { DebugConsole.SetTruthValue(args[1], ref showCollisionShapes); }\r\n                        if (args.Count >= 3) { collisionShapesColor = new Color(args[2]); }\r\n                        DebugConsole.main.Print(\r\n                            $\"Collision shapes are now {(showCollisionShapes ? \"visible\" : \"invisible\")} with color {collisionShapesColor.ToHtml()}\"\r\n                        );\r\n                    }\r\n                },\r\n\r\n                new DebugConsole.Command\r\n                {\r\n                    name = \"god\",\r\n                    usageTip = \"god {on/off} {left/right}\",\r\n                    description = \"Makes a player invulnerable to enemy and enemy bullet collisions. With left/right argument, \" +\r\n                                  \"you can choose which player in a two-player game.\",\r\n                    action = (args) =>\r\n                    {\r\n                        bool god = true;\r\n                        Player.Control control = Player.Control.SinglePlayer;\r\n                        if (args.Count >= 2) { DebugConsole.SetTruthValue(args[1], ref god); }\r\n                        string l2 = \"\";\r\n                        if (args.Count >= 3)\r\n                        {\r\n                            l2 = args[2].ToLower();\r\n                            if (l2 == \"left\" || l2 == \"l\") { control = Player.Control.LeftPlayer; }\r\n                            else if (l2 == \"right\" || l2 == \"r\") { control = Player.Control.RightPlayer; }\r\n                            else { l2 = \"\"; }\r\n                        }\r\n                        Player player = Player.playersByControl.ContainsKey(control) ? Player.playersByControl[control] : null;\r\n                        if (player == null)\r\n                        {\r\n                            DebugConsole.main.Print(\"No such player.\");\r\n                            return;\r\n                        }\r\n                        player.debugInvincible = god;\r\n                        string l2f = (l2 != \"\") ? \"(\" + l2 + \") \" : \"\";\r\n                        DebugConsole.main.Print($\"Player {l2f}is now {(god ? \"invulnerable\" : \"vulnerable\")}.\");\r\n                    }\r\n                },\r\n            }\r\n        }", "comment": "\r\n        ", "methodParams": {}}, {"id": "DrawCollisionShape", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {"canvas": {"paramType": "CanvasItem", "defaultValue": "", "comment": ""}, "bNodeIndex": {"paramType": "int", "defaultValue": "", "comment": ""}}}]}, "StatsViews": {"comment": "    ", "declarations": [{"id": "currentMode", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        ", "methodParams": {}}, {"id": "main", "kind": "field", "mainType": "StatsViews", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "commandGroup", "kind": "field", "mainType": "DebugConsole.CommandGroup", "defaultValue": "new DebugConsole.CommandGroup\r\n        {\r\n            groupName = \"Stats Views\",\r\n            commands = new System.Collections.Generic.List<DebugConsole.Command>()\r\n            {\r\n                new DebugConsole.Command\r\n                {\r\n                    name = \"sv_off\",\r\n                    usageTip = \"sv_off\",\r\n                    description = \"Removes any open stats view.\",\r\n                    action = (args) =>\r\n                    {\r\n                        if (currentView != null) { currentView.Visible = false; }\r\n                        currentView = null;\r\n                        currentMode = \"\";\r\n                        DebugConsole.main.Print(\"Stats views have been closed.\");\r\n                    }\r\n                },\r\n\r\n                new DebugConsole.Command\r\n                {\r\n                    name = \"sv_timings\",\r\n                    usageTip = \"sv_timings\",\r\n                    description = \"Displays the time it takes to process essential functions of the engine.\",\r\n                    action = (args) =>\r\n                    {\r\n                        if (currentView != null) { currentView.Visible = false; }\r\n                        currentView = main.FindChild(\"Timings\") as Control;\r\n                        currentView.Visible = true;\r\n                        currentMode = \"timings\";\r\n                        DebugConsole.main.Print(\"Timings are now visible.\");\r\n                    }\r\n                },\r\n            }\r\n        }", "comment": "\r\n        ", "methodParams": {}}]}, "StatsViews+Timings": {"comment": "\r\n        ", "declarations": []}}}, "Blastula.Schedules.EnemySchedules": {"classes": {"SetInterpolationData": {"comment": "    /// <summary>\r\n    /// Set interpolation data for an EnemyMover to change the style.\r\n    /// </summary>\r\n    ", "declarations": [{"id": "moverID", "kind": "field", "mainType": "string", "defaultValue": "\"A\"", "comment": "        ", "methodParams": {}}, {"id": "easingTransition", "kind": "field", "mainType": "Tween.TransitionType", "defaultValue": "Tween.TransitionType.Quad", "comment": "        ", "methodParams": {}}, {"id": "easingType", "kind": "field", "mainType": "Tween.EaseType", "defaultValue": "Tween.EaseType.InOut", "comment": "        ", "methodParams": {}}, {"id": "tweenDuration", "kind": "field", "mainType": "string", "defaultValue": "\"0.5\"", "comment": "        ", "methodParams": {}}, {"id": "radialVelocityInterpolation", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        ", "methodParams": {}}]}, "TriggerSpawner": {"comment": "    ", "declarations": []}, "SetTargetPosition": {"comment": "    /// <summary>\r\n    /// Set the position of an enemy.\r\n    /// </summary>\r\n    ", "declarations": [{"id": "moverID", "kind": "field", "mainType": "string", "defaultValue": "\"A\"", "comment": "        ", "methodParams": {}}, {"id": "X", "kind": "field", "mainType": "string", "defaultValue": "\"0\"", "comment": "        ", "methodParams": {}}, {"id": "Y", "kind": "field", "mainType": "string", "defaultValue": "\"100\"", "comment": "        ", "methodParams": {}}]}, "SetTargetVelocity": {"comment": "    /// <summary>\r\n    /// Set the target velocity of an enemy.\r\n    /// </summary>\r\n    ", "declarations": [{"id": "moverID", "kind": "field", "mainType": "string", "defaultValue": "\"A\"", "comment": "        ", "methodParams": {}}, {"id": "radialMode", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        /// <summary>\r\n        /// If radial mode is on: X is the speed, and Y is the angle of travel in degrees.\r\n        /// If radial mode is off: X and Y are the speeds along their axes.\r\n        /// </summary>\r\n        ", "methodParams": {}}, {"id": "X", "kind": "field", "mainType": "string", "defaultValue": "\"0\"", "comment": "        ", "methodParams": {}}, {"id": "Y", "kind": "field", "mainType": "string", "defaultValue": "\"100\"", "comment": "        ", "methodParams": {}}]}, "EnemySchedule": {"comment": "    /// <summary>\r\n    /// Schedule used for enemy or spawner logic.\r\n    /// </summary>\r\n    ", "declarations": []}}}, "Blastula.Schedules": {"classes": {"BaseSchedule": {"comment": "    ", "declarations": [{"id": "referenceID", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        /// <summary>\r\n        /// Optional ID. If nonempty, this schedule can be referenced throughout all scenes, as long as it exists.\r\n        /// </summary>\r\n        ", "methodParams": {}}, {"id": "referencesByID", "kind": "field", "mainType": "Dictionary<string, BaseSchedule>", "defaultValue": "new Dictionary<string, BaseSchedule>()", "comment": "        ", "methodParams": {}}, {"id": "Execute", "kind": "method", "mainType": "Task", "defaultValue": "", "comment": "\n        ", "methodParams": {"source": {"paramType": "IVariableContainer", "defaultValue": "", "comment": ""}}}, {"id": "Solve", "kind": "method", "mainType": "Variant", "defaultValue": "", "comment": "\n        ", "methodParams": {"varName": {"paramType": "string", "defaultValue": "", "comment": ""}}}]}, "ScheduleReference": {"comment": "    ", "declarations": [{"id": "scheduleID", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        ", "methodParams": {}}, {"id": "other", "kind": "field", "mainType": "BaseSchedule", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "waitForIDExistence", "kind": "field", "mainType": "bool", "defaultValue": "true", "comment": "        ", "methodParams": {}}]}, "Select": {"comment": "    /// <summary>\r\n    /// Selects a particular schedule at a child index.\r\n    /// \"selection\" can be a true/false value or an integer.\r\n    /// When it is true/false, evaluating to false will choose the first child (index 0). Evaluating to true chooses the second child (index 1).\r\n    /// When it is an integer, it will choose the child at that index. Negative integers work as they do in Python,\r\n    /// counting from the list's end.\r\n    /// </summary>\r\n    ", "declarations": [{"id": "selection", "kind": "field", "mainType": "string", "defaultValue": "\"0\"", "comment": "        ", "methodParams": {}}]}, "SetContainerPosition": {"comment": "    /// <summary>\r\n    /// Directly sets the container's position.\r\n    /// </summary>\r\n    ", "declarations": [{"id": "X", "kind": "field", "mainType": "string", "defaultValue": "\"0\"", "comment": "        ", "methodParams": {}}, {"id": "Y", "kind": "field", "mainType": "string", "defaultValue": "\"0\"", "comment": "        ", "methodParams": {}}, {"id": "useGlobalPosition", "kind": "field", "mainType": "bool", "defaultValue": "true", "comment": "        ", "methodParams": {}}, {"id": "setPositionVariable", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        ", "methodParams": {}}]}, "Split": {"comment": "    /// <summary>\r\n    /// Run all child schedules and shots at the same time.\r\n    /// </summary>\r\n    ", "declarations": []}, "Wait": {"comment": "    /// <summary>\r\n    /// Waits an amount of time.\r\n    /// </summary>\r\n    ", "declarations": [{"id": "waitTime", "kind": "field", "mainType": "string", "defaultValue": "\"1\"", "comment": "\r\n        ", "methodParams": {}}, {"id": "units", "kind": "field", "mainType": "TimeUnits", "defaultValue": "TimeUnits.Seconds", "comment": "        ", "methodParams": {}}]}, "WaitUntil": {"comment": "    /// <summary>\r\n    /// Waits until the expression evaluates to something true.\r\n    /// </summary>\r\n    ", "declarations": [{"id": "condition", "kind": "field", "mainType": "string", "defaultValue": "\"true\"", "comment": "        ", "methodParams": {}}]}, "StageSchedule": {"comment": "    /// <summary>\r\n    /// A schedule item used for stages. Ensures that no local container is involved.\r\n    /// </summary>\r\n    ", "declarations": [{"id": "Execute", "kind": "method", "mainType": "Task", "defaultValue": "", "comment": "        ", "methodParams": {}}]}, "CycleWhile": {"comment": "    /// <summary>\r\n    /// Executes child sequences and schedules in their tree order.\r\n    /// Loops until the condition expression becomes false.\r\n    /// </summary>\r\n    ", "declarations": [{"id": "cycleCondition", "kind": "field", "mainType": "string", "defaultValue": "\"t < 5\"", "comment": "        ", "methodParams": {}}, {"id": "completedCyclesVariableName", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        /// <summary>\r\n        /// This would the variable name of the current cycle we are on, starting at 0.\r\n        /// When nonempty, it populates that temporary variable, to use in operations.\r\n        /// </summary>\r\n        ", "methodParams": {}}]}, "Cycle": {"comment": "    /// <summary>\r\n    /// Executes child sequences and schedules in their tree order.\r\n    /// Loops a number of times you can specify.\r\n    /// </summary>\r\n    ", "declarations": [{"id": "cycleCount", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        /// <summary>\r\n        /// Solves this expression at the beginning of execution to determine how many times to loop. Empty string means it loops forever.\r\n        /// </summary>\r\n        ", "methodParams": {}}, {"id": "completedCyclesVariableName", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        /// <summary>\r\n        /// This would the variable name of the current cycle we are on, starting at 0.\r\n        /// When nonempty, it populates that temporary variable, to use in operations.\r\n        /// </summary>\r\n        ", "methodParams": {}}]}, "StageSector": {"comment": "    /// <summary>\r\n    /// Defines a portion of a stage, or the stage itself.\r\n    /// It is meant to recursively contain smaller sections of the stage.\r\n    /// It can also be used to simply load a scene.\r\n    /// </summary>\r\n    ", "declarations": [{"id": "duration", "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": "        /// <summary>\r\n        /// This portion of the stage will end after this number of seconds, if it's not yet ended.\r\n        /// Leave blank to have infinite time.\r\n        /// </summary>\r\n        ", "methodParams": {}}, {"id": "endWhenChildrenComplete", "kind": "field", "mainType": "bool", "defaultValue": "true", "comment": "        /// <summary>\r\n        /// If true, end when all child schedules have been completed.\r\n        /// </summary>\r\n        ", "methodParams": {}}, {"id": "shouldUseTimer", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        ", "methodParams": {}}, {"id": "formation", "kind": "field", "mainType": "PackedScene", "defaultValue": "null", "comment": "        /// <summary>\r\n        /// A scene which is loaded when this sector becomes executed.\r\n        /// This could be a wave of enemies, but it could also be completely different.\r\n        /// For example, we could load the overlay that introduces the stage.\r\n        /// We could also load a boss, whose attacks are then loaded in child sectors.\r\n        /// </summary>\r\n        ", "methodParams": {}}, {"id": "formationDeletionDelay", "kind": "field", "mainType": "string", "defaultValue": "\"0\"", "comment": "        /// <summary>\r\n        /// The spawned formation instance is deleted after this number of seconds.\r\n        /// Leave blank to have infinite time, but be advised that the Node will not be deleted automatically,\r\n        /// which may cause the game's memory to be slowly burdened.\r\n        /// </summary>\r\n        ", "methodParams": {}}, {"id": "state", "kind": "property", "mainType": "State", "defaultValue": "State.NotStarted", "comment": "        \r\n        ", "methodParams": {}}, {"id": "GetCurrentSector", "kind": "method", "mainType": "StageSector", "defaultValue": "", "comment": "\r\n        /// <summary>\r\n        /// Get the sector at the top of the stack; the most granular one right now.\r\n        /// </summary>\r\n        ", "methodParams": {}}, {"id": "GetCurrentEnemyFormation", "kind": "method", "mainType": "EnemyFormation", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}, {"id": "GetTimeRemaining", "kind": "method", "mainType": "double", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}, {"id": "ShouldBeExecuting", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}, {"id": "RunTime", "kind": "method", "mainType": "Task", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}, {"id": "EndCurrentSectorImmediately", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}, {"id": "EndImmediately", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}, {"id": "Preload", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        ", "methodParams": {}}]}}}, "Blastula.VirtualVariables": {"classes": {"Persistent": {"comment": "    /// <summary>\n    /// These variables are meant to persist as long as the program is running.\n    /// </summary>\n\t", "declarations": [{"id": "BLASTULA_ROOT_PATH", "kind": "const", "mainType": "string", "defaultValue": "\"res://addons/Blastula\"", "comment": "        ", "methodParams": {}}, {"id": "NODE_ICON_PATH", "kind": "const", "mainType": "string", "defaultValue": "BLASTULA_ROOT_PATH + \"/Graphics/NodeIcons\"", "comment": "        /// <summary>\r\n        /// Used for the editor to find custom icons.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "SIMULATED_FPS", "kind": "const", "mainType": "int", "defaultValue": "60", "comment": "        /// <summary>\n        /// This determines the timestep of behaviors. The actual framerate may be lower.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "LAZY_SAFE_DISTANCE", "kind": "const", "mainType": "float", "defaultValue": "140", "comment": "        /// <summary>\n        /// This is the space between a collision object and a bullet,\n        /// such that a lazy bullet feels safe to sleep for a few frames before checking collision again.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "main", "kind": "property", "mainType": "Persistent", "defaultValue": "null", "comment": "\n        ", "methodParams": {}}, {"id": "customData", "kind": "property", "mainType": "Dictionary<string, Variant>", "defaultValue": "new Dictionary<string, Variant>()", "comment": "\n        ", "methodParams": {}}, {"id": "specialNames", "kind": "property", "mainType": "HashSet<string>", "defaultValue": "new HashSet<string>()\n        {\n            \"fps\", \"simulated_fps\"\n        }", "comment": "\n        ", "methodParams": {}}, {"id": "GetSpecial", "kind": "method", "mainType": "Variant", "defaultValue": "", "comment": "\n        ", "methodParams": {"varName": {"paramType": "string", "defaultValue": "", "comment": ""}}}]}, "Persistent+Priorities": {"comment": "\n        ", "declarations": [{"id": "FRAME_COUNTER_INCREMENT", "kind": "const", "mainType": "int", "defaultValue": "int.MinValue", "comment": "            ", "methodParams": {}}, {"id": "EXECUTE", "kind": "const", "mainType": "int", "defaultValue": "40000", "comment": "            ", "methodParams": {}}, {"id": "COLLISION", "kind": "const", "mainType": "int", "defaultValue": "50000", "comment": "            ", "methodParams": {}}, {"id": "POST_EXECUTE", "kind": "const", "mainType": "int", "defaultValue": "60000", "comment": "            ", "methodParams": {}}, {"id": "RENDER", "kind": "const", "mainType": "int", "defaultValue": "70000", "comment": "            ", "methodParams": {}}, {"id": "RENDER_DEBUG_COLLISIONS", "kind": "const", "mainType": "int", "defaultValue": "70001", "comment": "            ", "methodParams": {}}, {"id": "PAUSE", "kind": "const", "mainType": "int", "defaultValue": "100000", "comment": "            ", "methodParams": {}}, {"id": "CONSUME_INPUT", "kind": "const", "mainType": "int", "defaultValue": "int.MaxValue", "comment": "            ", "methodParams": {}}]}, "Session": {"comment": "    /// <summary>\n    /// These variables are meant to persist within game sessions (between going back to the start menu).\n    /// </summary>\n\t", "declarations": [{"id": "canPause", "kind": "property", "mainType": "bool", "defaultValue": "true", "comment": "        /// <summary>\n        /// True if the game can be paused.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "paused", "kind": "property", "mainType": "bool", "defaultValue": "false", "comment": "        /// <summary>\n        /// True if the game is paused.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "timeScale", "kind": "property", "mainType": "double", "defaultValue": "1.0", "comment": "        /// <summary>\n        /// The time scale used for bullet behavior.\n        /// </summary>\n        ", "methodParams": {}}, {"id": "difficulty", "kind": "property", "mainType": "int", "defaultValue": "1", "comment": "        /// <summary>\r\n        /// This integer is the game's difficulty, if you choose to use it.\r\n        /// Standard convention is 0: easy, 1: normal, 2: hard, 3: (whatever funny name you give to the hardest difficulty)\r\n        /// But anything's possible!\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "rank", "kind": "property", "mainType": "float", "defaultValue": "0.5f", "comment": "        /// <summary>\r\n        /// This is the game's rank, if you choose to use it.\r\n        /// Rank is a common element in classic STGs, similar to a sub-difficulty, and usually adapts to how well the player progresses\r\n        /// by changing bullet pattern density or speed.\r\n        /// I suggest varying it within the interval [0, 1].\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "rankFrozen", "kind": "field", "mainType": "bool", "defaultValue": "false", "comment": "        /// <summary>\r\n        /// True if we don't want the rank to change. Good for testing and practicing.\r\n        /// </summary>\n        ", "methodParams": {}}, {"id": "SetCanPause", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"s": {"paramType": "bool", "defaultValue": "", "comment": ""}}}, {"id": "Pause", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "        ", "methodParams": {}}, {"id": "Unpause", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "SetTimeScale", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"newTimeScale": {"paramType": "double", "defaultValue": "", "comment": ""}}}, {"id": "Reset", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "IsPaused", "kind": "method", "mainType": "bool", "defaultValue": "", "comment": "\n        ", "methodParams": {}}, {"id": "SetDifficulty", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\n        ", "methodParams": {"newDifficulty": {"paramType": "int", "defaultValue": "", "comment": ""}}}, {"id": "SetRank", "kind": "method", "mainType": "void", "defaultValue": "", "comment": "\r\n        /// <param name=\"newRank\">Rank value to replace the old one.</param>\r\n        /// <param name=\"force\">If true, change the rank even while it's frozen.</param>\n        ", "methodParams": {"newRank": {"paramType": "float", "defaultValue": "", "comment": ""}, "force": {"paramType": "bool", "defaultValue": "false", "comment": ""}}}, {"id": "main", "kind": "property", "mainType": "Session", "defaultValue": "null", "comment": "\n        ", "methodParams": {}}, {"id": "customData", "kind": "property", "mainType": "Dictionary<string, Variant>", "defaultValue": "new Dictionary<string, Variant>()", "comment": "\n        ", "methodParams": {}}, {"id": "specialNames", "kind": "property", "mainType": "HashSet<string>", "defaultValue": "new HashSet<string>()\n        {\n            \"can_pause\", \"paused\", \"time_scale\", \"difficulty\", \"dif\", \"rank\"\n        }", "comment": "\n        ", "methodParams": {}}, {"id": "GetSpecial", "kind": "method", "mainType": "Variant", "defaultValue": "", "comment": "\n        ", "methodParams": {"varName": {"paramType": "string", "defaultValue": "", "comment": ""}}}]}}}}}