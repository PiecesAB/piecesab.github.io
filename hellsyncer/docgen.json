{"date": "3/22/2024 12:39:19 AM", "namespaces": {"HellSyncer": {"classes": {"AudioStreamSynced": {"kind": "class", "bases": ["AudioStreamPlayer"], "abstract": false, "inners": {"TempoRegion": {"kind": "class", "bases": [], "abstract": false, "inners": {}, "declarations": [], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}}, "declarations": [{"id": "mainLoop", "static": false, "kind": "field", "mainType": "Vector2", "defaultValue": "Vector2.Zero", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "midi", "static": false, "kind": "field", "mainType": "ParsedMidi", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "generatedBpm", "static": false, "kind": "field", "mainType": "float", "defaultValue": "120f", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "generatedTimeSignature", "static": false, "kind": "field", "mainType": "Vector2I", "defaultValue": "new Vector2I(4, 4)", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "TOLERANCE", "static": true, "kind": "const", "mainType": "float", "defaultValue": "0.03f", "comment": {"summary": " If the audible music gets this far from the MIDI (in seconds), then we will force the music to lag or skip. The reason this happens is because of unpredictable lag in the game, but the MIDI needs to run deterministically (for replays). It's not pretty, but we can have our cake and eat it too. ", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "PROCESS_PRIORITY", "static": true, "kind": "const", "mainType": "int", "defaultValue": "-1000000", "comment": {"summary": " Occurs early in the frame to allow other items to respond to the changes ", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "OnNote", "static": false, "kind": "delegate", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"info": {"paramType": "FullNoteInfo", "defaultValue": ""}}}, {"id": "OnText", "static": false, "kind": "delegate", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"text": {"paramType": "BaseTextEvent", "defaultValue": ""}}}, {"id": "main", "static": true, "kind": "field", "mainType": "AudioStreamSynced", "defaultValue": "", "comment": {"summary": " There can only be one... for now. ", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "TickToTime", "static": false, "kind": "method", "mainType": "float", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"tick": {"paramType": "ulong", "defaultValue": ""}}}, {"id": "TimeToTick", "static": false, "kind": "method", "mainType": "ulong", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"time": {"paramType": "float", "defaultValue": ""}}}, {"id": "AddInstrumentListener", "static": true, "kind": "method", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"ins": {"paramType": "Instrument", "defaultValue": ""}}}, {"id": "RemoveInstrumentListener", "static": true, "kind": "method", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"ins": {"paramType": "Instrument", "defaultValue": ""}}}, {"id": "AddTextListener", "static": true, "kind": "method", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"con": {"paramType": "MidiTextReader", "defaultValue": ""}}}, {"id": "RemoveTextListener", "static": true, "kind": "method", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"con": {"paramType": "MidiTextReader", "defaultValue": ""}}}, {"id": "GetBeatAndMeasure", "static": false, "kind": "method", "mainType": "(ulong measure, float beat)", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "GetTempo", "static": false, "kind": "method", "mainType": "float", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "PlaySynced", "static": false, "kind": "method", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "Persistent": {"kind": "class", "bases": [], "abstract": false, "inners": {}, "declarations": [{"id": "HELLSYNCER_ROOT_PATH", "static": true, "kind": "const", "mainType": "string", "defaultValue": "\"res://addons/HellSyncer\"", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "NODE_ICON_PATH", "static": true, "kind": "const", "mainType": "string", "defaultValue": "HELLSYNCER_ROOT_PATH + \"/Graphics/NodeIcons\"", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "ParsedMidi": {"kind": "class", "bases": ["Resource"], "abstract": false, "inners": {"SortFullNotesByStart": {"kind": "class", "bases": ["IComparer&lt;FullNoteInfo&gt;"], "abstract": false, "inners": {}, "declarations": [{"id": "Compare", "static": false, "kind": "method", "mainType": "int", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"x": {"paramType": "FullNoteInfo", "defaultValue": ""}, "y": {"paramType": "FullNoteInfo", "defaultValue": ""}}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}}, "declarations": [{"id": "tracks", "static": false, "kind": "field", "mainType": "Track[]", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "ticksPerQN", "static": false, "kind": "field", "mainType": "ushort", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "ReadByte", "static": false, "kind": "method", "mainType": "byte", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "ReadTwoBytes", "static": false, "kind": "method", "mainType": "(byte, byte)", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "ReadNBytes", "static": false, "kind": "method", "mainType": "byte[]", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"n": {"paramType": "uint", "defaultValue": ""}}}, {"id": "ReadShort", "static": false, "kind": "method", "mainType": "ushort", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "ReadInt", "static": false, "kind": "method", "mainType": "uint", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "ReadIntVarLen", "static": false, "kind": "method", "mainType": "uint", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "ReadString", "static": false, "kind": "method", "mainType": "string", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "ReadHeader", "static": false, "kind": "method", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "ReadTrackEvent", "static": false, "kind": "method", "mainType": "TrackEvent", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "ReadTrack", "static": false, "kind": "method", "mainType": "Track", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"skip": {"paramType": "bool", "defaultValue": ""}}}, {"id": "ParseRaw", "static": false, "kind": "method", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"raw": {"paramType": "byte[]", "defaultValue": ""}, "trackRanges": {"paramType": "Vector2[]", "defaultValue": ""}}}, {"id": "GenerateForBeat", "static": false, "kind": "method", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"bpm": {"paramType": "float", "defaultValue": ""}, "timeSignature": {"paramType": "Vector2I", "defaultValue": ""}}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "MidiImporter": {"kind": "class", "bases": ["EditorImportPlugin"], "abstract": false, "inners": {}, "declarations": [], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "Instrument": {"kind": "class", "bases": ["Node"], "abstract": false, "inners": {}, "declarations": [{"id": "trackIds", "static": false, "kind": "field", "mainType": "int[]", "defaultValue": "new int[1] { 1 }", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "noteRanges", "static": false, "kind": "field", "mainType": "Vector2[]", "defaultValue": "new Vector2[1] { new Vector2(0, 127) }", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "minimumVelocity", "static": false, "kind": "field", "mainType": "int", "defaultValue": "0", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "PROCESS_PRIORITY", "static": true, "kind": "const", "mainType": "int", "defaultValue": "AudioStreamSynced.PROCESS_PRIORITY + 1", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "OnNoteEventHandler", "static": false, "kind": "delegate", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"midiTone": {"paramType": "int", "defaultValue": ""}, "velocity": {"paramType": "int", "defaultValue": ""}, "duration": {"paramType": "float", "defaultValue": ""}}}, {"id": "SelfOnNote", "static": false, "kind": "method", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"note": {"paramType": "FullNoteInfo", "defaultValue": ""}}}], "comment": {"summary": " Metronome emit a signal when measures and particular intervals happen. ", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "Metronome": {"kind": "class", "bases": ["Node"], "abstract": false, "inners": {}, "declarations": [{"id": "intervalQuarterNotes", "static": false, "kind": "field", "mainType": "float", "defaultValue": "1f", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "debugMeasureSound", "static": false, "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "debugBeatSound", "static": false, "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "PROCESS_PRIORITY", "static": true, "kind": "const", "mainType": "int", "defaultValue": "AudioStreamSynced.PROCESS_PRIORITY + 1", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "OnMeasureEventHandler", "static": false, "kind": "delegate", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"measureNumber": {"paramType": "ulong", "defaultValue": ""}}}, {"id": "OnIntervalEventHandler", "static": false, "kind": "delegate", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"measureNumber": {"paramType": "ulong", "defaultValue": ""}, "beat": {"paramType": "float", "defaultValue": ""}}}], "comment": {"summary": " Metronome emit a signal when measures and particular intervals happen. ", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "MidiTextReader": {"kind": "class", "bases": ["Node"], "abstract": false, "inners": {}, "declarations": [{"id": "textEventType", "static": false, "kind": "field", "mainType": "TextEventID", "defaultValue": "TextEventID.Any", "comment": {"summary": " Filter out any text event that doesn't match this type. ", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "magicPhrase", "static": false, "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": {"summary": " If not empty, filter out any text event that doesn't contain this substring. ", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "PROCESS_PRIORITY", "static": true, "kind": "const", "mainType": "int", "defaultValue": "AudioStreamSynced.PROCESS_PRIORITY + 1", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "OnTextEventHandler", "static": false, "kind": "delegate", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"text": {"paramType": "string", "defaultValue": ""}}}, {"id": "SelfOnText", "static": false, "kind": "method", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"@event": {"paramType": "BaseTextEvent", "defaultValue": ""}}}], "comment": {"summary": " Emits a signal for text events embedded in the MIDI. ", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}}}, "HellSyncer.Midi": {"classes": {"EventID": {"kind": "enum", "bases": [], "abstract": false, "inners": {}, "declarations": [{"id": "Unsupported", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0x0000", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "NoteOff", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0x8000", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "NoteOn", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0x9000", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "KeyPressure", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xA000", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "ControlChange", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xB000", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "ProgramChange", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xC000", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "ChannelPressure", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xD000", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "PitchBend", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xE000", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "SysExF0", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xF000", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "SysExF7", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xF700", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "Text", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xFF01", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "Copyright", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xFF02", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "TrackName", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xFF03", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "InstrumentName", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xFF04", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "Lyric", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xFF05", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "Marker", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xFF06", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "Cue", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xFF07", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "EndOfTrack", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xFF2F", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "Tempo", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xFF51", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "TimeSignature", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xFF58", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "KeySignature", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xFF59", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "TextEventID": {"kind": "enum", "bases": [], "abstract": false, "inners": {}, "declarations": [{"id": "Any", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xFF00", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "Text", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xFF01", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "Copyright", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xFF02", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "TrackName", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xFF03", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "InstrumentName", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xFF04", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "Lyric", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xFF05", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "Marker", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xFF06", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "Cue", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "0xFF07", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "SysExF7Event": {"kind": "class", "bases": ["TrackEvent"], "abstract": false, "inners": {}, "declarations": [{"id": "data", "static": false, "kind": "field", "mainType": "byte[]", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "TrackEvent": {"kind": "class", "bases": ["Resource"], "abstract": false, "inners": {}, "declarations": [{"id": "displayID", "static": false, "kind": "field", "mainType": "EventID", "defaultValue": "EventID.Unsupported", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "tick", "static": false, "kind": "field", "mainType": "ulong", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "TrackNameEvent": {"kind": "class", "bases": ["BaseTextEvent"], "abstract": false, "inners": {}, "declarations": [], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "TextEvent": {"kind": "class", "bases": ["BaseTextEvent"], "abstract": false, "inners": {}, "declarations": [], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "SysExF0Event": {"kind": "class", "bases": ["TrackEvent"], "abstract": false, "inners": {}, "declarations": [{"id": "data", "static": false, "kind": "field", "mainType": "byte[]", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "UnsupportedEvent": {"kind": "class", "bases": ["TrackEvent"], "abstract": false, "inners": {}, "declarations": [], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "ProgramChangeEvent": {"kind": "class", "bases": ["ChannelEvent"], "abstract": false, "inners": {}, "declarations": [{"id": "newProgramNumber", "static": false, "kind": "field", "mainType": "byte", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "NoteOffEvent": {"kind": "class", "bases": ["PVEvent"], "abstract": false, "inners": {}, "declarations": [], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "MarkerEvent": {"kind": "class", "bases": ["BaseTextEvent"], "abstract": false, "inners": {}, "declarations": [], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "PitchBendEvent": {"kind": "class", "bases": ["ChannelEvent"], "abstract": false, "inners": {}, "declarations": [{"id": "newValue", "static": false, "kind": "field", "mainType": "short", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "NoteOnEvent": {"kind": "class", "bases": ["PVEvent"], "abstract": false, "inners": {}, "declarations": [], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "LyricEvent": {"kind": "class", "bases": ["BaseTextEvent"], "abstract": false, "inners": {}, "declarations": [], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "KeyPressureEvent": {"kind": "class", "bases": ["PVEvent"], "abstract": false, "inners": {}, "declarations": [], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "KeySignatureEvent": {"kind": "class", "bases": ["TrackEvent"], "abstract": false, "inners": {}, "declarations": [{"id": "sharpCount", "static": false, "kind": "field", "mainType": "sbyte", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "isMinor", "static": false, "kind": "field", "mainType": "bool", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "EndOfTrackEvent": {"kind": "class", "bases": ["TrackEvent"], "abstract": false, "inners": {}, "declarations": [], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "CopyrightEvent": {"kind": "class", "bases": ["BaseTextEvent"], "abstract": false, "inners": {}, "declarations": [], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "CueEvent": {"kind": "class", "bases": ["BaseTextEvent"], "abstract": false, "inners": {}, "declarations": [], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "ChannelPressureEvent": {"kind": "class", "bases": ["ChannelEvent"], "abstract": false, "inners": {}, "declarations": [{"id": "pressure", "static": false, "kind": "field", "mainType": "byte", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "ChannelEvent": {"kind": "class", "bases": ["TrackEvent"], "abstract": false, "inners": {}, "declarations": [{"id": "channel", "static": false, "kind": "field", "mainType": "byte", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "BaseTextEvent": {"kind": "class", "bases": ["TrackEvent"], "abstract": false, "inners": {}, "declarations": [{"id": "text", "static": false, "kind": "field", "mainType": "string", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "ControlChangeEvent": {"kind": "class", "bases": ["ChannelEvent"], "abstract": false, "inners": {}, "declarations": [{"id": "controllerNumber", "static": false, "kind": "field", "mainType": "byte", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "newValue", "static": false, "kind": "field", "mainType": "byte", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "InstrumentNameEvent": {"kind": "class", "bases": ["BaseTextEvent"], "abstract": false, "inners": {}, "declarations": [], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "TempoEvent": {"kind": "class", "bases": ["TrackEvent"], "abstract": false, "inners": {}, "declarations": [{"id": "microsecondsPerQN", "static": false, "kind": "field", "mainType": "ulong", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "GetBPM", "static": false, "kind": "method", "mainType": "float", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "TimeSignatureEvent": {"kind": "class", "bases": ["TrackEvent"], "abstract": false, "inners": {}, "declarations": [{"id": "numerator", "static": false, "kind": "field", "mainType": "byte", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "denominator", "static": false, "kind": "field", "mainType": "byte", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "GetFractionString", "static": false, "kind": "method", "mainType": "string", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "PVEvent": {"kind": "class", "bases": ["ChannelEvent"], "abstract": false, "inners": {}, "declarations": [{"id": "note", "static": false, "kind": "field", "mainType": "byte", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "velocity", "static": false, "kind": "field", "mainType": "byte", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "FullNoteInfo": {"kind": "class", "bases": ["NoteOnEvent"], "abstract": false, "inners": {}, "declarations": [{"id": "durationInTicks", "static": false, "kind": "field", "mainType": "ulong", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "GetDuration", "static": false, "kind": "method", "mainType": "float", "defaultValue": "", "comment": {"summary": " Duration in seconds at current tempo ", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "Track": {"kind": "class", "bases": ["Resource"], "abstract": false, "inners": {}, "declarations": [{"id": "trackEvents", "static": false, "kind": "field", "mainType": "TrackEvent[]", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "fullNoteInfos", "static": false, "kind": "field", "mainType": "FullNoteInfo[]", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "GetFullNoteIndexAtTick", "static": false, "kind": "method", "mainType": "int", "defaultValue": "", "comment": {"summary": " Return the earliest event index that begins on or after the tick (has not yet occurred). If no such event exists, it will return trackEvents.Length (representing the end). ", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"tick": {"paramType": "ulong", "defaultValue": ""}}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}}}, "Blastula.Schedules": {"classes": {"WaitForMidiText": {"kind": "class", "bases": ["BaseSchedule"], "abstract": false, "inners": {}, "declarations": [{"id": "textReader", "static": false, "kind": "field", "mainType": "MidiTextReader", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "buildup", "static": false, "kind": "field", "mainType": "bool", "defaultValue": "true", "comment": {"summary": " If true, text events will build up while we're waiting elsewhere. This causes no wait to occur when new events are available. ", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "textVarName", "static": false, "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": {"summary": " The note's MIDI tone, which is an integer from 0-127, will be set locally in this variable name. Middle C (C4) is 60, and each integer corresponds to one semitone. ", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "OnText", "static": false, "kind": "method", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"text": {"paramType": "string", "defaultValue": ""}}}], "comment": {"summary": " Waits for a note to be played. ", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "WaitForInstrument": {"kind": "class", "bases": ["BaseSchedule"], "abstract": false, "inners": {"NoteInfo": {"kind": "struct", "bases": [], "abstract": false, "inners": {}, "declarations": [], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}}, "declarations": [{"id": "instrument", "static": false, "kind": "field", "mainType": "Instrument", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "buildup", "static": false, "kind": "field", "mainType": "bool", "defaultValue": "true", "comment": {"summary": " If true, notes will build up while we're waiting elsewhere. This causes no wait to occur when new notes are available. Important for polyphony when this is the only wait in the schedule loop. ", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "toneVarName", "static": false, "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": {"summary": " The note's MIDI tone, which is an integer from 0-127, will be set locally in this variable name. Middle C (C4) is 60, and each integer corresponds to one semitone. ", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "velocityVarName", "static": false, "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": {"summary": " The note's MIDI velocity, which is an integer from 0-127, will be set locally in this variable name. 1 is as quiet as possible, and 127 is as loud as possible. ", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "durationVarName", "static": false, "kind": "field", "mainType": "string", "defaultValue": "\"\"", "comment": {"summary": " The duration of the note in seconds will be set locally in this variable name. ", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "OnNote", "static": false, "kind": "method", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"midiTone": {"paramType": "int", "defaultValue": ""}, "velocity": {"paramType": "int", "defaultValue": ""}, "duration": {"paramType": "float", "defaultValue": ""}}}], "comment": {"summary": " Waits for a note to be played. ", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}, "WaitForMetronome": {"kind": "class", "bases": ["BaseSchedule"], "abstract": false, "inners": {"Mode": {"kind": "enum", "bases": [], "abstract": false, "inners": {}, "declarations": [{"id": "Intervals", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "Measures", "static": false, "kind": "enum-member", "mainType": "", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}], "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}}, "declarations": [{"id": "mode", "static": false, "kind": "field", "mainType": "Mode", "defaultValue": "Mode.Intervals", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "metronome", "static": false, "kind": "field", "mainType": "Metronome", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "count", "static": false, "kind": "field", "mainType": "string", "defaultValue": "\"1\"", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {}}, {"id": "OnMeasure", "static": false, "kind": "method", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"measure": {"paramType": "ulong", "defaultValue": ""}}}, {"id": "OnInterval", "static": false, "kind": "method", "mainType": "void", "defaultValue": "", "comment": {"summary": "", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}, "methodParams": {"measure": {"paramType": "ulong", "defaultValue": ""}, "beat": {"paramType": "float", "defaultValue": ""}}}], "comment": {"summary": " Waits a number of metronome intervals. ", "examples": [], "remarks": "", "returns": "", "params": {}, "typeParams": {}}}}}}}